{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useHttp } from '../../hooks/http.hook';\n\nconst useWeatherServices = () => {\n  _s();\n\n  const _apiBase = 'https://api.weatherapi.com/v1/';\n  const _apikey = 'key= 1ff90ee44b664ef785f22329220501 ';\n  const {\n    request\n  } = useHttp();\n\n  const getWeatherByCity = async city => {\n    const res = await request(`${_apiBase}current.json?${_apikey} &q=${city}&aqi=no`);\n    return _transformWeather(res);\n  };\n\n  const getWeatherByDays = async city => {\n    const res = await request(`${_apiBase}forecast.json?${_apikey}&q=${city}&days=8&aqi=no&alerts=no`);\n    return _transformWeatherByDays(res);\n  };\n\n  const _transformWeather = res => {\n    return {\n      name: res.location.name,\n      country: res.location.country,\n      localTime: res.location.localtime,\n      tempC: res.current.temp_c,\n      tempF: res.current.temp_f,\n      condInfo: res.current.condition.text,\n      condImg: res.current.condition.icon\n    };\n  };\n\n  const _transformWeatherByDays = res => {\n    return {\n      name: res.location.name,\n      country: res.location.country,\n      localTime: res.location.localtime,\n      lat: res.location.lat,\n      lon: res.location.lon,\n      day: res.forecast.forecastday[0].date,\n      day1: res.forecast.forecastday[1].date,\n      day2: res.forecast.forecastday[2].date,\n      dayMaxTempC: res.forecast.forecastday[0].day.maxtemp_c,\n      day1MaxTempC: res.forecast.forecastday[1].day.maxtemp_c,\n      day2MaxTempC: res.forecast.forecastday[2].day.maxtemp_c,\n      sunrise1: res.forecast.forecastday[0].astro.sunrise,\n      sunset1: res.forecast.forecastday[0].astro.sunset,\n      dayMinTempC: res.forecast.forecastday[0].day.mintemp_c,\n      day1MinTempC: res.forecast.forecastday[1].day.mintemp_c,\n      day2MinTempC: res.forecast.forecastday[2].day.mintemp_c\n    };\n  };\n\n  return {\n    getWeatherByCity,\n    getWeatherByDays\n  };\n};\n\n_s(useWeatherServices, \"Cd6rTTFIaDkCOxqWEjU2WwhZI/U=\", false, function () {\n  return [useHttp];\n});\n\nexport default useWeatherServices;","map":{"version":3,"sources":["C:/Users/svary/OneDrive/Рабочий стол/Auth/client/src/services/WeatherApi.js"],"names":["useHttp","useWeatherServices","_apiBase","_apikey","request","getWeatherByCity","city","res","_transformWeather","getWeatherByDays","_transformWeatherByDays","name","location","country","localTime","localtime","tempC","current","temp_c","tempF","temp_f","condInfo","condition","text","condImg","icon","lat","lon","day","forecast","forecastday","date","day1","day2","dayMaxTempC","maxtemp_c","day1MaxTempC","day2MaxTempC","sunrise1","astro","sunrise","sunset1","sunset","dayMinTempC","mintemp_c","day1MinTempC","day2MinTempC"],"mappings":"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","sourcesContent":["import {useHttp} from '../../hooks/http.hook'\r\n\r\nconst useWeatherServices=()=>{\r\n  const _apiBase = 'https://api.weatherapi.com/v1/';\r\n  const  _apikey = 'key= 1ff90ee44b664ef785f22329220501 ';\r\n  const {request}=useHttp()\r\n  \r\n  const  getWeatherByCity= async(city)=>{\r\n    const res = await request(`${_apiBase}current.json?${_apikey} &q=${city}&aqi=no`)\r\n    return _transformWeather(res);\r\n  }\r\n  const getWeatherByDays=async(city)=>{\r\n    const res=await request(`${_apiBase}forecast.json?${_apikey}&q=${city}&days=8&aqi=no&alerts=no`)\r\n    return _transformWeatherByDays(res);\r\n  }\r\n\r\n  const _transformWeather=(res)=>{\r\n    return{\r\n      name:res.location.name,\r\n      country:res.location.country,\r\n      localTime:res.location.localtime,\r\n      tempC:res.current.temp_c,\r\n      tempF:res.current.temp_f,\r\n      condInfo:res.current.condition.text,\r\n      condImg:res.current.condition.icon\r\n    }\r\n  }\r\n  const _transformWeatherByDays=(res)=>{\r\n    return{\r\n      name:res.location.name,\r\n      country:res.location.country,\r\n      localTime:res.location.localtime,\r\n      \r\n      lat: res.location.lat,\r\n      lon:res.location.lon,\r\n\r\n      day:res.forecast.forecastday[0].date,\r\n      day1:res.forecast.forecastday[1].date,\r\n      day2:res.forecast.forecastday[2].date,\r\n      dayMaxTempC:res.forecast.forecastday[0].day.maxtemp_c,\r\n      day1MaxTempC:res.forecast.forecastday[1].day.maxtemp_c,\r\n      day2MaxTempC: res.forecast.forecastday[2].day.maxtemp_c,\r\n      \r\n      sunrise1:res.forecast.forecastday[0].astro.sunrise,\r\n\r\n\r\n      sunset1: res.forecast.forecastday[0].astro.sunset,\r\n      \r\n      dayMinTempC:res.forecast.forecastday[0].day.mintemp_c,\r\n      day1MinTempC:res.forecast.forecastday[1].day.mintemp_c,\r\n      day2MinTempC:res.forecast.forecastday[2].day.mintemp_c,\r\n\r\n    }\r\n  }\r\n  return {getWeatherByCity,getWeatherByDays};\r\n}\r\nexport default useWeatherServices;"]},"metadata":{},"sourceType":"module"}