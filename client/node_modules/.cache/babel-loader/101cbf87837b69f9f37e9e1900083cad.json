{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createSlice, createAsyncThunk, current } from \"@reduxjs/toolkit\";\nimport useWeatherServices from '../../services/WeatherApi';\nconst initialState = {\n  data: [],\n  cityInfo: {},\n  city: '',\n  allCities: []\n};\nexport const searchCity = _s(createAsyncThunk('weather/searchCity', _s(async state => {\n  _s();\n\n  const {\n    getWeatherByCity\n  } = useWeatherServices();\n  const response = await getWeatherByCity(state);\n  return response;\n}, \"Zw2WUmbvtFAN4IWB85tUxg+sMu4=\", false, function () {\n  return [useWeatherServices];\n})), \"Zw2WUmbvtFAN4IWB85tUxg+sMu4=\", false, function () {\n  return [useWeatherServices];\n});\nexport const weatherInfo = _s2(createAsyncThunk('weather/weatherInfo', _s2(async state => {\n  _s2();\n\n  const {\n    getWeatherByDays\n  } = useWeatherServices();\n  const response = await getWeatherByDays(state);\n  return response;\n}, \"c1UmGJW3mafAFSWI5cLrHD8/nQE=\", false, function () {\n  return [useWeatherServices];\n})), \"c1UmGJW3mafAFSWI5cLrHD8/nQE=\", false, function () {\n  return [useWeatherServices];\n}); // export const FirstLoadingCities=createAsyncThunk(\n//   'weather/FirstLoadingCities',\n//   async(state)=>{\n//     const {getWeatherByCity}=useWeatherServices();\n//     for(let i=0;i<state.allCities.length;i++){\n//       const response= await getWeatherByDays(state.)\n//       return response\n//     }\n//   }\n// )\n\nconst WeatherSlice = createSlice({\n  name: 'weather',\n  initialState,\n  reducers: {\n    delCity: (state, action) => {\n      state.data = current(state.data).filter((item, id) => id !== action.payload);\n      state.allCities = cur;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(searchCity.pending, (state, action) => {\n      console.log('Download date city');\n    }).addCase(searchCity.fulfilled, (state, action) => {\n      state.data.push(action.payload);\n      state.allCities.push(action.payload.name);\n      localStorage.setItem('data', current(state.allCities));\n    }).addCase(searchCity.rejected, (state, action) => {\n      console.log('error');\n    }).addCase(weatherInfo.fulfilled, (state, action) => {\n      state.cityInfo = action.payload;\n    }).addCase(weatherInfo.rejected, (state, action) => {\n      console.log('error');\n    }).addDefaultCase(() => {});\n  }\n});\nconst {\n  actions,\n  reducer\n} = WeatherSlice;\nexport default reducer;\nexport const {\n  delCity\n} = actions;","map":{"version":3,"sources":["C:/Users/svary/OneDrive/Рабочий стол/Auth/client/src/components/weatherList/WeatherSlice.js"],"names":["createSlice","createAsyncThunk","current","useWeatherServices","initialState","data","cityInfo","city","allCities","searchCity","state","getWeatherByCity","response","weatherInfo","getWeatherByDays","WeatherSlice","name","reducers","delCity","action","filter","item","id","payload","cur","extraReducers","builder","addCase","pending","console","log","fulfilled","push","localStorage","setItem","rejected","addDefaultCase","actions","reducer"],"mappings":"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","sourcesContent":["import {createSlice,createAsyncThunk,current} from \"@reduxjs/toolkit\"\r\nimport useWeatherServices from '../../services/WeatherApi'\r\n\r\nconst initialState = {\r\n  data:[],\r\n  cityInfo:{},\r\n  city:'',\r\n  allCities:[]\r\n}\r\n\r\nexport const searchCity=createAsyncThunk(\r\n  'weather/searchCity',\r\n  async(state)=>{\r\n    const {getWeatherByCity}=useWeatherServices();\r\n    const response= await getWeatherByCity(state)\r\n    return response\r\n  }\r\n)\r\n\r\nexport const weatherInfo=createAsyncThunk(\r\n  'weather/weatherInfo',\r\n  async(state)=>{\r\n    const { getWeatherByDays } = useWeatherServices();\r\n    const response= await getWeatherByDays(state)\r\n    return response\r\n  }\r\n)\r\n\r\n// export const FirstLoadingCities=createAsyncThunk(\r\n//   'weather/FirstLoadingCities',\r\n//   async(state)=>{\r\n//     const {getWeatherByCity}=useWeatherServices();\r\n//     for(let i=0;i<state.allCities.length;i++){\r\n//       const response= await getWeatherByDays(state.)\r\n//       return response\r\n//     }\r\n//   }\r\n// )\r\nconst WeatherSlice=createSlice({\r\n  name:'weather',\r\n  initialState,\r\n  reducers: {\r\n      delCity: (state, action) => {\r\n          state.data=current(state.data).filter((item,id)=>(id!==action.payload))\r\n          state.allCities=cur\r\n      }\r\n  },\r\n\r\n  extraReducers: (builder) => {\r\n    builder\r\n        .addCase(searchCity.pending,(state,action)=>{\r\n          console.log('Download date city')\r\n        })\r\n        .addCase(searchCity.fulfilled,(state,action)=>{\r\n          state.data.push(action.payload)\r\n          state.allCities.push(action.payload.name)\r\n          localStorage.setItem('data',current(state.allCities))         \r\n        })\r\n        .addCase(searchCity.rejected,(state,action)=>{\r\n          console.log('error')\r\n        })\r\n\r\n        .addCase(weatherInfo.fulfilled,(state,action)=>{\r\n          state.cityInfo=action.payload\r\n        })\r\n        .addCase(weatherInfo.rejected,(state,action)=>{\r\n          console.log('error')\r\n        })\r\n\r\n        .addDefaultCase(() => {})\r\n}\r\n})\r\n\r\nconst {actions, reducer} = WeatherSlice;\r\n\r\nexport default reducer;\r\n\r\nexport const {\r\n  delCity\r\n} = actions;"]},"metadata":{},"sourceType":"module"}