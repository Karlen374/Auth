{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\svary\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\Auth\\\\client\\\\src\\\\components\\\\charList\\\\CharList.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport './charList.scss';\nimport { useState, useEffect } from 'react';\nimport useMarvelServices from '../../services/MarvelServices';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { getData, focusOnItem } from './CharSlice';\nimport { useDispatch, useSelector, getState } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CharList = props => {\n  _s();\n\n  const [offset, setOffset] = useState(211);\n  const {\n    data,\n    newItemLoading,\n    charEnded,\n    selectedId,\n    firstUpd\n  } = useSelector(store => store.char);\n  const dispatch = useDispatch();\n  const {\n    loading,\n    getAllCharacters\n  } = useMarvelServices();\n  useEffect(() => {\n    dispatch(getData(offset));\n  }, []); //выполниться 1 раз только при создании \n\n  const onRequest = () => {\n    // setNewItemLoading(newItemLoading=> false);\n    // getAllCharacters(offset).then(onCharsLoaded)\n    setOffset(offset => offset + 9);\n    dispatch(getData(offset));\n  }; //  const onCharsLoaded = (Chars) => {\n  //     let ended = false;\n  //     if (Chars.length < 9) {\n  //       ended = true;\n  //     }\n  //     setData(data=>[...data,...Chars]);\n  //     setNewItemLoading(newItemLoading=>false);\n  //     setOffset(offset=>offset+9);\n  //     setFirstUpd(false);\n  //     setCharEnded(charEnded=>ended);\n  //   }\n  // const focusOnItem=(id)=>{\n  //   setSelectedId(selectedId=>id);\n  // }\n\n\n  {\n    const content = /*#__PURE__*/_jsxDEV(Element, {\n      selectedId: selectedId,\n      data: data,\n      onCharSelected: props.onCharSelected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 22\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"char__list\",\n      children: [content, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => onRequest(offset),\n        disabled: newItemLoading,\n        style: {\n          'display': !charEnded ? 'none' : 'block'\n        },\n        className: \"button button__main button__long\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inner\",\n          children: \"load more\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(CharList, \"85MFwIapDyVclth1kl0/H9IeLXg=\", false, function () {\n  return [useSelector, useDispatch, useMarvelServices];\n});\n\n_c = CharList;\n\nconst Element = _ref => {\n  _s2();\n\n  let {\n    data,\n    onCharSelected,\n    selectedId\n  } = _ref;\n  // const {data,newItemLoading,offset,charEnded,selectedId,firstUpd}=useSelector(store=>store.char)\n  const dispatch = useDispatch();\n  const elements = data.map(item => {\n    const active = item.id === selectedId;\n    const ourClass = active ? 'char__item char__item_selected' : 'char__item';\n    return /*#__PURE__*/_jsxDEV(ElementItem, { ...item,\n      ourClass: ourClass,\n      focusOnItem: () => dispatch(focusOnItem(item.id)),\n      onCharSelected: () => onCharSelected(item.id)\n    }, item.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"char__grid\",\n    children: elements\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Element, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\n_c2 = Element;\n\nconst ElementItem = props => {\n  const {\n    name,\n    thumbnail,\n    onCharSelected,\n    focusOnItem,\n    ourClass\n  } = props;\n  let CharImg = \"char__item__img\";\n  if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") CharImg = \"char__item__no__img\";\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    tabIndex: 0,\n    onClick: () => {\n      onCharSelected();\n      focusOnItem();\n    },\n    className: ourClass,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      className: CharImg,\n      src: thumbnail,\n      alt: \"abyss\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"char__name\",\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n\n_c3 = ElementItem;\nexport default CharList;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CharList\");\n$RefreshReg$(_c2, \"Element\");\n$RefreshReg$(_c3, \"ElementItem\");","map":{"version":3,"sources":["C:/Users/svary/OneDrive/Рабочий стол/Auth/client/src/components/charList/CharList.js"],"names":["useState","useEffect","useMarvelServices","Spinner","getData","focusOnItem","useDispatch","useSelector","getState","CharList","props","offset","setOffset","data","newItemLoading","charEnded","selectedId","firstUpd","store","char","dispatch","loading","getAllCharacters","onRequest","content","onCharSelected","Element","elements","map","item","active","id","ourClass","ElementItem","name","thumbnail","CharImg"],"mappings":"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","sourcesContent":["import './charList.scss';\r\nimport {useState,useEffect} from 'react'\r\nimport useMarvelServices from '../../services/MarvelServices';\r\nimport Spinner from 'react-bootstrap/Spinner'\r\nimport { getData,focusOnItem } from './CharSlice';\r\nimport { useDispatch, useSelector,getState } from 'react-redux';\r\n\r\nconst CharList =(props)=>{\r\n  const [offset,setOffset]=useState(211);\r\n  const {data,newItemLoading,charEnded,selectedId,firstUpd}=useSelector(store=>store.char)\r\n  const dispatch=useDispatch()\r\n  \r\n  const {loading,getAllCharacters}=useMarvelServices();\r\n\r\n  useEffect(() => {\r\n    dispatch(getData(offset))\r\n  },[])//выполниться 1 раз только при создании \r\n\r\n  \r\n  const onRequest = () => {\r\n   \r\n    // setNewItemLoading(newItemLoading=> false);\r\n    // getAllCharacters(offset).then(onCharsLoaded)\r\n    setOffset(offset=>offset+9)\r\n    dispatch(getData(offset))\r\n    \r\n  \r\n  }\r\n\r\n\r\n//  const onCharsLoaded = (Chars) => {\r\n\r\n//     let ended = false;\r\n//     if (Chars.length < 9) {\r\n//       ended = true;\r\n//     }\r\n//     setData(data=>[...data,...Chars]);\r\n//     setNewItemLoading(newItemLoading=>false);\r\n//     setOffset(offset=>offset+9);\r\n//     setFirstUpd(false);\r\n//     setCharEnded(charEnded=>ended);\r\n    \r\n//   }\r\n\r\n  // const focusOnItem=(id)=>{\r\n  //   setSelectedId(selectedId=>id);\r\n  // }\r\n  \r\n {\r\n    const content =  <Element selectedId={selectedId}  data={data} onCharSelected={props.onCharSelected}   />;\r\n    return (\r\n      \r\n      <div className=\"char__list\">\r\n        {content}    \r\n          <button onClick={() => onRequest(offset)} disabled={newItemLoading} style={{ 'display':!charEnded?'none':'block'}} className=\"button button__main button__long\">\r\n              <div className=\"inner\">load more</div>\r\n          </button>\r\n      </div>\r\n    )\r\n  }\r\n   \r\n}\r\n\r\nconst Element = ({ data, onCharSelected,selectedId}) => {\r\n  // const {data,newItemLoading,offset,charEnded,selectedId,firstUpd}=useSelector(store=>store.char)\r\n  const dispatch=useDispatch()\r\n  const elements = data.map((item) => {\r\n    const active = (item.id === selectedId);\r\n    const ourClass=active?'char__item char__item_selected':'char__item'\r\n    return(\r\n      <ElementItem\r\n        key={item.id}\r\n        {...item}\r\n        ourClass={ourClass}\r\n        focusOnItem={()=>dispatch(focusOnItem(item.id))}\r\n        onCharSelected={()=>onCharSelected(item.id)}\r\n        \r\n      />\r\n    )\r\n      \r\n  })\r\n  return(\r\n    <ul className=\"char__grid\">\r\n        {elements}\r\n    </ul>\r\n  )\r\n}\r\n\r\nconst ElementItem=(props)=>{\r\n  const { name, thumbnail, onCharSelected,focusOnItem,ourClass} = props;\r\n  let CharImg = \"char__item__img\" ;\r\n  if (thumbnail===\"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") CharImg=\"char__item__no__img\"\r\n  \r\n  return(\r\n    <li   tabIndex={0}\r\n          \r\n          onClick={() => {\r\n            onCharSelected();\r\n            focusOnItem();\r\n          }}\r\n          className={ourClass}>\r\n          <img className={CharImg} src={thumbnail} alt=\"abyss\"/>\r\n          <div className=\"char__name\">{name}</div>\r\n    </li> \r\n  )\r\n}\r\n\r\n\r\n\r\nexport default CharList;\r\n"]},"metadata":{},"sourceType":"module"}