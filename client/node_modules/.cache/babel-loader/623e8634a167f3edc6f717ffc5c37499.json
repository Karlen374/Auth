{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport useEdamamServices from \"../../services/Edamam\";\nimport { createSlice, createAsyncThunk, current } from \"@reduxjs/toolkit\";\nconst initialState = {\n  data: [],\n  loading: false,\n  favoriteData: [],\n  FoodInfo: {}\n};\nexport const searchFood = _s(createAsyncThunk('food/searchFood', _s(async state => {\n  _s();\n\n  const {\n    getFoodData\n  } = useEdamamServices();\n  const response = await getFoodData(state);\n  return response;\n}, \"QbOIZX+NLwOB2HrbdbjBONNerIk=\", false, function () {\n  return [useEdamamServices];\n})), \"QbOIZX+NLwOB2HrbdbjBONNerIk=\", false, function () {\n  return [useEdamamServices];\n});\nconst FoodSlice = createSlice({\n  name: 'food',\n  initialState,\n  reducers: {\n    addFavorite: (state, action) => {\n      state.favoriteData.push(action.payload);\n    },\n    delFavorite: (state, action) => {\n      state.favoriteData = current(state.favoriteData).filter(item => item.calories !== action.payload.calories);\n    },\n    getInfoFood: (state, action) => {\n      state.FoodInfo = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(searchFood.pending, (state, action) => {\n      state.loading = true;\n    }).addCase(searchFood.fulfilled, (state, action) => {\n      console.log(action.payload.hits);\n      state.data = action.payload.hits;\n      state.loading = false;\n    }).addCase(searchFood.rejected, () => {\n      console.log('error');\n    });\n  }\n});\nconst {\n  actions,\n  reducer\n} = FoodSlice;\nexport default reducer;\nexport const {\n  addFavorite,\n  delFavorite\n} = actions;","map":{"version":3,"sources":["C:/Users/svary/OneDrive/Рабочий стол/Auth/client/src/components/FoodSearch/FoodSlice.js"],"names":["useEdamamServices","createSlice","createAsyncThunk","current","initialState","data","loading","favoriteData","FoodInfo","searchFood","state","getFoodData","response","FoodSlice","name","reducers","addFavorite","action","push","payload","delFavorite","filter","item","calories","getInfoFood","extraReducers","builder","addCase","pending","fulfilled","console","log","hits","rejected","actions","reducer"],"mappings":";;AAAA,OAAOA,iBAAP,MAA8B,uBAA9B;AACA,SAAQC,WAAR,EAAoBC,gBAApB,EAAqCC,OAArC,QAAmD,kBAAnD;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAC,EADc;AAEnBC,EAAAA,OAAO,EAAC,KAFW;AAGnBC,EAAAA,YAAY,EAAC,EAHM;AAInBC,EAAAA,QAAQ,EAAC;AAJU,CAArB;AAOA,OAAO,MAAMC,UAAU,MAACP,gBAAgB,CACtC,iBADsC,KAEtC,MAAMQ,KAAN,IAAc;AAAA;;AACZ,QAAM;AAACC,IAAAA;AAAD,MAAcX,iBAAiB,EAArC;AACA,QAAMY,QAAQ,GAAC,MAAMD,WAAW,CAACD,KAAD,CAAhC;AACA,SAAOE,QAAP;AACD,CANqC;AAAA,UAGhBZ,iBAHgB;AAAA,GAAjB;AAAA,UAGCA,iBAHD;AAAA,EAAhB;AAQP,MAAMa,SAAS,GAACZ,WAAW,CAAC;AAC1Ba,EAAAA,IAAI,EAAC,MADqB;AAE1BV,EAAAA,YAF0B;AAG1BW,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EAAE,CAACN,KAAD,EAAQO,MAAR,KAAmB;AAC9BP,MAAAA,KAAK,CAACH,YAAN,CAAmBW,IAAnB,CAAwBD,MAAM,CAACE,OAA/B;AACD,KAHO;AAIRC,IAAAA,WAAW,EAAC,CAACV,KAAD,EAAOO,MAAP,KAAgB;AAC1BP,MAAAA,KAAK,CAACH,YAAN,GAAmBJ,OAAO,CAACO,KAAK,CAACH,YAAP,CAAP,CAA4Bc,MAA5B,CAAoCC,IAAD,IAASA,IAAI,CAACC,QAAL,KAAgBN,MAAM,CAACE,OAAP,CAAeI,QAA3E,CAAnB;AACD,KANO;AAORC,IAAAA,WAAW,EAAC,CAACd,KAAD,EAAOO,MAAP,KAAgB;AAC1BP,MAAAA,KAAK,CAACF,QAAN,GAAeS,MAAM,CAACE,OAAtB;AACD;AATO,GAHgB;AAc1BM,EAAAA,aAAa,EAAEC,OAAD,IAAW;AACvBA,IAAAA,OAAO,CACJC,OADH,CACWlB,UAAU,CAACmB,OADtB,EAC8B,CAAClB,KAAD,EAAOO,MAAP,KAAgB;AAC1CP,MAAAA,KAAK,CAACJ,OAAN,GAAc,IAAd;AACD,KAHH,EAIGqB,OAJH,CAIWlB,UAAU,CAACoB,SAJtB,EAIgC,CAACnB,KAAD,EAAOO,MAAP,KAAgB;AAC5Ca,MAAAA,OAAO,CAACC,GAAR,CAAYd,MAAM,CAACE,OAAP,CAAea,IAA3B;AACAtB,MAAAA,KAAK,CAACL,IAAN,GAAWY,MAAM,CAACE,OAAP,CAAea,IAA1B;AACAtB,MAAAA,KAAK,CAACJ,OAAN,GAAc,KAAd;AACD,KARH,EASGqB,OATH,CASWlB,UAAU,CAACwB,QATtB,EAS+B,MAAI;AAC/BH,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD,KAXH;AAYD;AA3ByB,CAAD,CAA3B;AA6BA,MAAM;AAACG,EAAAA,OAAD;AAAUC,EAAAA;AAAV,IAAqBtB,SAA3B;AAEA,eAAesB,OAAf;AAEA,OAAO,MAAM;AACXnB,EAAAA,WADW;AAEXI,EAAAA;AAFW,IAGTc,OAHG","sourcesContent":["import useEdamamServices from \"../../services/Edamam\";\r\nimport {createSlice,createAsyncThunk,current} from \"@reduxjs/toolkit\"\r\n\r\nconst initialState = {\r\n  data:[],\r\n  loading:false,\r\n  favoriteData:[],\r\n  FoodInfo:{}\r\n}\r\n\r\nexport const searchFood=createAsyncThunk(\r\n  'food/searchFood',\r\n  async(state)=>{\r\n    const {getFoodData}=useEdamamServices();\r\n    const response=await getFoodData(state)\r\n    return response\r\n  }\r\n)\r\nconst FoodSlice=createSlice({\r\n  name:'food',\r\n  initialState,\r\n  reducers: {\r\n    addFavorite: (state, action) => {\r\n      state.favoriteData.push(action.payload)\r\n    },\r\n    delFavorite:(state,action)=>{\r\n      state.favoriteData=current(state.favoriteData).filter((item)=>(item.calories!==action.payload.calories))\r\n    },\r\n    getInfoFood:(state,action)=>{\r\n      state.FoodInfo=action.payload\r\n    }\r\n  },\r\n  extraReducers:(builder)=>{\r\n    builder\r\n      .addCase(searchFood.pending,(state,action)=>{\r\n        state.loading=true;\r\n      })\r\n      .addCase(searchFood.fulfilled,(state,action)=>{\r\n        console.log(action.payload.hits)\r\n        state.data=action.payload.hits\r\n        state.loading=false;\r\n      })\r\n      .addCase(searchFood.rejected,()=>{\r\n        console.log('error')\r\n      })\r\n  }\r\n})\r\nconst {actions, reducer} = FoodSlice;\r\n\r\nexport default reducer;\r\n\r\nexport const {\r\n  addFavorite,\r\n  delFavorite\r\n} = actions;"]},"metadata":{},"sourceType":"module"}