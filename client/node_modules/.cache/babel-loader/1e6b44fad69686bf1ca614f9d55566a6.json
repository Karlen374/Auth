{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport AuthService from '../../services/AuthService';\nimport axios from 'axios';\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport useWeatherServices from '../../services/WeatherApi';\nconst initialState = {\n  email: '',\n  password: '',\n  auth: false,\n  user: {},\n  spinner: false,\n  data: [],\n  city: ''\n};\nexport const searchCity = _s(createAsyncThunk('weather/searchCity', _s(async state => {\n  _s();\n\n  const {\n    getWeatherByCity\n  } = useWeatherServices();\n  const response = await getWeatherByCity(state);\n  console.log(response);\n  return response;\n}, \"Zw2WUmbvtFAN4IWB85tUxg+sMu4=\", false, function () {\n  return [useWeatherServices];\n})), \"Zw2WUmbvtFAN4IWB85tUxg+sMu4=\", false, function () {\n  return [useWeatherServices];\n});\nconst WeatherSlice = createSlice({\n  name: 'weather',\n  initialState,\n  reducers: {\n    logout: async state => {\n      try {\n        const response = await AuthService.logout();\n        localStorage.removeItem('token');\n        state.auth = false;\n        state.user = {};\n      } catch (e) {\n        var _e$response, _e$response$data;\n\n        console.log((_e$response = e.response) === null || _e$response === void 0 ? void 0 : (_e$response$data = _e$response.data) === null || _e$response$data === void 0 ? void 0 : _e$response$data.message);\n      }\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(searchCity.pending, (state, action) => {\n      console.log('Download');\n    }).addCase(searchCity.fulfilled, (satet, action) => {\n      console.log('sucsess');\n    }).addDefaultCase(() => {});\n  }\n});\nconst {\n  actions,\n  reducer\n} = LoginSlice;\nexport default reducer;\nexport const {\n  logout\n} = actions;","map":{"version":3,"sources":["C:/Users/svary/OneDrive/Рабочий стол/Auth/client/src/components/weatherList/WeatherSlice.js"],"names":["AuthService","axios","createSlice","createAsyncThunk","useWeatherServices","initialState","email","password","auth","user","spinner","data","city","searchCity","state","getWeatherByCity","response","console","log","WeatherSlice","name","reducers","logout","localStorage","removeItem","e","message","extraReducers","builder","addCase","pending","action","fulfilled","satet","addDefaultCase","actions","reducer","LoginSlice"],"mappings":";;AAAA,OAAOA,WAAP,MAAwB,4BAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,EAAoBC,gBAApB,QAA2C,kBAA3C;AACA,OAAOC,kBAAP,MAA+B,2BAA/B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAC,EADa;AAEnBC,EAAAA,QAAQ,EAAC,EAFU;AAGnBC,EAAAA,IAAI,EAAC,KAHc;AAInBC,EAAAA,IAAI,EAAC,EAJc;AAKnBC,EAAAA,OAAO,EAAC,KALW;AAMnBC,EAAAA,IAAI,EAAC,EANc;AAOnBC,EAAAA,IAAI,EAAC;AAPc,CAArB;AAYA,OAAO,MAAMC,UAAU,MAACV,gBAAgB,CACtC,oBADsC,KAEtC,MAAMW,KAAN,IAAc;AAAA;;AACZ,QAAM;AAACC,IAAAA;AAAD,MAAmBX,kBAAkB,EAA3C;AACA,QAAMY,QAAQ,GAAE,MAAMD,gBAAgB,CAACD,KAAD,CAAtC;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,SAAOA,QAAP;AACD,CAPqC;AAAA,UAGXZ,kBAHW;AAAA,GAAjB;AAAA,UAGMA,kBAHN;AAAA,EAAhB;AASP,MAAMe,YAAY,GAACjB,WAAW,CAAC;AAC7BkB,EAAAA,IAAI,EAAC,SADwB;AAE7Bf,EAAAA,YAF6B;AAG7BgB,EAAAA,QAAQ,EAAC;AACTC,IAAAA,MAAM,EAAC,MAAMR,KAAN,IAAc;AACnB,UAAI;AACF,cAAME,QAAQ,GAAG,MAAMhB,WAAW,CAACsB,MAAZ,EAAvB;AACAC,QAAAA,YAAY,CAACC,UAAb,CAAwB,OAAxB;AACAV,QAAAA,KAAK,CAACN,IAAN,GAAW,KAAX;AACAM,QAAAA,KAAK,CAACL,IAAN,GAAW,EAAX;AACD,OALD,CAMA,OAAOgB,CAAP,EAAU;AAAA;;AACRR,QAAAA,OAAO,CAACC,GAAR,gBAAYO,CAAC,CAACT,QAAd,oEAAY,YAAYL,IAAxB,qDAAY,iBAAkBe,OAA9B;AACD;AACF;AAXQ,GAHoB;AAgB7BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAEFC,OAFL,CAEahB,UAAU,CAACiB,OAFxB,EAEgC,CAAChB,KAAD,EAAOiB,MAAP,KAAgB;AAC1Cd,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACD,KAJL,EAKKW,OALL,CAKahB,UAAU,CAACmB,SALxB,EAKkC,CAACC,KAAD,EAAOF,MAAP,KAAgB;AAC5Cd,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD,KAPL,EAQKgB,cARL,CAQoB,MAAM,CAAE,CAR5B;AASH;AA1B8B,CAAD,CAA9B;AA6BA,MAAM;AAACC,EAAAA,OAAD;AAAUC,EAAAA;AAAV,IAAqBC,UAA3B;AAEA,eAAeD,OAAf;AAEA,OAAO,MAAM;AACVd,EAAAA;AADU,IAETa,OAFG","sourcesContent":["import AuthService from '../../services/AuthService'\r\nimport axios from 'axios'\r\nimport {createSlice,createAsyncThunk} from \"@reduxjs/toolkit\"\r\nimport useWeatherServices from '../../services/WeatherApi'\r\n\r\nconst initialState = {\r\n  email:'',\r\n  password:'',\r\n  auth:false,\r\n  user:{},\r\n  spinner:false,\r\n  data:[],\r\n  city:''\r\n}\r\n\r\n\r\n\r\nexport const searchCity=createAsyncThunk(\r\n  'weather/searchCity',\r\n  async(state)=>{\r\n    const {getWeatherByCity}=useWeatherServices();\r\n    const response= await getWeatherByCity(state)\r\n    console.log(response)\r\n    return response\r\n  }\r\n)\r\nconst WeatherSlice=createSlice({\r\n  name:'weather',\r\n  initialState,\r\n  reducers:{\r\n  logout:async(state)=>{\r\n    try {\r\n      const response = await AuthService.logout();\r\n      localStorage.removeItem('token');\r\n      state.auth=false;\r\n      state.user={};\r\n    }\r\n    catch (e) {\r\n      console.log(e.response?.data?.message);\r\n    }\r\n  },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n        \r\n        .addCase(searchCity.pending,(state,action)=>{\r\n          console.log('Download')\r\n        })\r\n        .addCase(searchCity.fulfilled,(satet,action)=>{\r\n          console.log('sucsess')\r\n        })\r\n        .addDefaultCase(() => {})\r\n}\r\n})\r\n\r\nconst {actions, reducer} = LoginSlice;\r\n\r\nexport default reducer;\r\n\r\nexport const {\r\n   logout,\r\n} = actions;"]},"metadata":{},"sourceType":"module"}