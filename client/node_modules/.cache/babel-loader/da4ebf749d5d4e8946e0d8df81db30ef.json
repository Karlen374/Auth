{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createSlice, createAsyncThunk, current } from \"@reduxjs/toolkit\";\nimport useMarvelServices from \"../../services/MarvelServices\";\nconst initialState = {\n  data: [],\n  newItemLoading: false,\n  offset: 211,\n  charEnded: false,\n  selectedId: -1,\n  firstUpd: true\n};\nexport const getData = _s(createAsyncThunk('char/getData', _s(async state => {\n  _s();\n\n  console.log(state);\n  const {\n    getAllCharacters\n  } = useMarvelServices(); // const { getAllCharacters }=useMarvelServices();\n\n  const response = await getAllCharacters(initialState.offset);\n  return response;\n}, \"ibinA0o7PGIUE+uvC9S9Hem2yjg=\", false, function () {\n  return [useMarvelServices];\n})), \"ibinA0o7PGIUE+uvC9S9Hem2yjg=\", false, function () {\n  return [useMarvelServices];\n});\nconst CharSlice = createSlice({\n  name: 'char',\n  initialState,\n  reducers: {\n    focusOnItem: (state, action) => {\n      state.selectedId = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(getData.pending, (state, action) => {\n      // console.log('Loading Character')\n      state.newItemLoading = false;\n    }).addCase(getData.fulfilled, (state, action) => {\n      const ended = true;\n\n      if (action.payload < 9) {\n        ended = false;\n      }\n\n      state.data = [...state.data, ...action.payload];\n      state.newItemLoading = false;\n      state.offset = state.offset + 9;\n      state.firstUpd = false;\n      state.charEnded = ended;\n    }).addCase(getData.rejected, (state, action) => {\n      var _action$error;\n\n      console.log(action === null || action === void 0 ? void 0 : (_action$error = action.error) === null || _action$error === void 0 ? void 0 : _action$error.message);\n    });\n  }\n});\nconst {\n  actions,\n  reducer\n} = CharSlice;\nexport default reducer;\nexport const {} = actions;","map":{"version":3,"sources":["C:/Users/svary/OneDrive/Рабочий стол/Auth/client/src/components/charList/CharSlice.js"],"names":["createSlice","createAsyncThunk","current","useMarvelServices","initialState","data","newItemLoading","offset","charEnded","selectedId","firstUpd","getData","state","console","log","getAllCharacters","response","CharSlice","name","reducers","focusOnItem","action","payload","extraReducers","builder","addCase","pending","fulfilled","ended","rejected","error","message","actions","reducer"],"mappings":";;AAAA,SAAQA,WAAR,EAAoBC,gBAApB,EAAqCC,OAArC,QAAmD,kBAAnD;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAC,EADc;AAEnBC,EAAAA,cAAc,EAAC,KAFI;AAGnBC,EAAAA,MAAM,EAAC,GAHY;AAInBC,EAAAA,SAAS,EAAC,KAJS;AAKnBC,EAAAA,UAAU,EAAC,CAAC,CALO;AAMnBC,EAAAA,QAAQ,EAAC;AANU,CAArB;AASA,OAAO,MAAMC,OAAO,MAACV,gBAAgB,CACnC,cADmC,KAEnC,MAAMW,KAAN,IAAc;AAAA;;AACZC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,QAAM;AAACG,IAAAA;AAAD,MAAmBZ,iBAAiB,EAA1C,CAFY,CAGZ;;AACA,QAAMa,QAAQ,GAAC,MAAMD,gBAAgB,CAACX,YAAY,CAACG,MAAd,CAArC;AACA,SAAOS,QAAP;AACD,CARkC;AAAA,UAIRb,iBAJQ;AAAA,GAAjB;AAAA,UAISA,iBAJT;AAAA,EAAb;AAWP,MAAMc,SAAS,GAACjB,WAAW,CAAC;AAC1BkB,EAAAA,IAAI,EAAC,MADqB;AAE1Bd,EAAAA,YAF0B;AAG1Be,EAAAA,QAAQ,EAAE;AACNC,IAAAA,WAAW,EAAC,CAACR,KAAD,EAAOS,MAAP,KAAgB;AAC1BT,MAAAA,KAAK,CAACH,UAAN,GAAiBY,MAAM,CAACC,OAAxB;AACD;AAHK,GAHgB;AAQ1BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWd,OAAO,CAACe,OADnB,EAC2B,CAACd,KAAD,EAAOS,MAAP,KAAgB;AACvC;AACAT,MAAAA,KAAK,CAACN,cAAN,GAAqB,KAArB;AACD,KAJH,EAKGmB,OALH,CAKWd,OAAO,CAACgB,SALnB,EAK6B,CAACf,KAAD,EAAOS,MAAP,KAAgB;AACzC,YAAMO,KAAK,GAAC,IAAZ;;AACA,UAAIP,MAAM,CAACC,OAAP,GAAe,CAAnB,EAAqB;AACnBM,QAAAA,KAAK,GAAC,KAAN;AACD;;AACDhB,MAAAA,KAAK,CAACP,IAAN,GAAW,CAAC,GAAGO,KAAK,CAACP,IAAV,EAAe,GAAGgB,MAAM,CAACC,OAAzB,CAAX;AACAV,MAAAA,KAAK,CAACN,cAAN,GAAqB,KAArB;AACAM,MAAAA,KAAK,CAACL,MAAN,GAAaK,KAAK,CAACL,MAAN,GAAa,CAA1B;AACAK,MAAAA,KAAK,CAACF,QAAN,GAAe,KAAf;AACAE,MAAAA,KAAK,CAACJ,SAAN,GAAgBoB,KAAhB;AAED,KAhBH,EAiBGH,OAjBH,CAiBWd,OAAO,CAACkB,QAjBnB,EAiB4B,CAACjB,KAAD,EAAOS,MAAP,KAAgB;AAAA;;AACxCR,MAAAA,OAAO,CAACC,GAAR,CAAYO,MAAZ,aAAYA,MAAZ,wCAAYA,MAAM,CAAES,KAApB,kDAAY,cAAeC,OAA3B;AACD,KAnBH;AAqBH;AA9B2B,CAAD,CAA3B;AAiCA,MAAM;AAACC,EAAAA,OAAD;AAAUC,EAAAA;AAAV,IAAqBhB,SAA3B;AAEA,eAAegB,OAAf;AAEA,OAAO,MAAM,KAETD,OAFG","sourcesContent":["import {createSlice,createAsyncThunk,current} from \"@reduxjs/toolkit\"\r\nimport useMarvelServices from \"../../services/MarvelServices\"\r\n\r\nconst initialState = {\r\n  data:[],\r\n  newItemLoading:false,\r\n  offset:211,\r\n  charEnded:false,\r\n  selectedId:-1,\r\n  firstUpd:true,\r\n}\r\n\r\nexport const getData=createAsyncThunk(\r\n  'char/getData',\r\n  async(state)=>{\r\n    console.log(state)\r\n    const {getAllCharacters}=useMarvelServices();\r\n    // const { getAllCharacters }=useMarvelServices();\r\n    const response=await getAllCharacters(initialState.offset)\r\n    return response;\r\n  }\r\n)\r\n\r\nconst CharSlice=createSlice({\r\n  name:'char',\r\n  initialState,\r\n  reducers: {\r\n      focusOnItem:(state,action)=>{\r\n        state.selectedId=action.payload\r\n      }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getData.pending,(state,action)=>{\r\n        // console.log('Loading Character')\r\n        state.newItemLoading=false\r\n      })\r\n      .addCase(getData.fulfilled,(state,action)=>{\r\n        const ended=true\r\n        if (action.payload<9){\r\n          ended=false\r\n        }\r\n        state.data=[...state.data,...action.payload]\r\n        state.newItemLoading=false\r\n        state.offset=state.offset+9\r\n        state.firstUpd=false;\r\n        state.charEnded=ended\r\n    \r\n      })\r\n      .addCase(getData.rejected,(state,action)=>{\r\n        console.log(action?.error?.message)\r\n      })\r\n       \r\n}\r\n})\r\n\r\nconst {actions, reducer} = CharSlice;\r\n\r\nexport default reducer;\r\n\r\nexport const {\r\n  \r\n} = actions;"]},"metadata":{},"sourceType":"module"}