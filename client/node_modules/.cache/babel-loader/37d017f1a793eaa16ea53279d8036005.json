{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createSlice, createAsyncThunk, current } from \"@reduxjs/toolkit\";\nimport useWeatherServices from '../../services/WeatherApi';\nconst initialState = {\n  data: [],\n  city: ''\n};\nexport const searchCity = _s(createAsyncThunk('weather/searchCity', _s(async state => {\n  _s();\n\n  const {\n    getWeatherByCity\n  } = useWeatherServices();\n  const response = await getWeatherByCity(state);\n  return response;\n}, \"Zw2WUmbvtFAN4IWB85tUxg+sMu4=\", false, function () {\n  return [useWeatherServices];\n})), \"Zw2WUmbvtFAN4IWB85tUxg+sMu4=\", false, function () {\n  return [useWeatherServices];\n});\nexport const WeatherSlice = createSlice({\n  name: 'weather',\n  initialState,\n  reducers: {\n    delCity: (state, action) => {\n      state.data = current(state.data).filter((item, id) => id !== action.payload);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(searchCity.pending, (state, action) => {\n      console.log('Download date city');\n    }).addCase(searchCity.fulfilled, (state, action) => {\n      state.data.push(action.payload);\n    }).addCase(searchCity.rejected, (state, action) => {\n      console.log('error');\n    }).addDefaultCase(() => {});\n  }\n});\nconst {\n  actions,\n  reducer\n} = WeatherSlice;\nexport default reducer;\nexport const {\n  delCity\n} = actions;","map":{"version":3,"sources":["C:/Users/svary/OneDrive/Рабочий стол/Auth/client/src/components/weatherList/WeatherSlice.js"],"names":["createSlice","createAsyncThunk","current","useWeatherServices","initialState","data","city","searchCity","state","getWeatherByCity","response","WeatherSlice","name","reducers","delCity","action","filter","item","id","payload","extraReducers","builder","addCase","pending","console","log","fulfilled","push","rejected","addDefaultCase","actions","reducer"],"mappings":";;AAAA,SAAQA,WAAR,EAAoBC,gBAApB,EAAqCC,OAArC,QAAmD,kBAAnD;AACA,OAAOC,kBAAP,MAA+B,2BAA/B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAC,EADc;AAEnBC,EAAAA,IAAI,EAAC;AAFc,CAArB;AAKA,OAAO,MAAMC,UAAU,MAACN,gBAAgB,CACtC,oBADsC,KAEtC,MAAMO,KAAN,IAAc;AAAA;;AACZ,QAAM;AAACC,IAAAA;AAAD,MAAmBN,kBAAkB,EAA3C;AACA,QAAMO,QAAQ,GAAE,MAAMD,gBAAgB,CAACD,KAAD,CAAtC;AACA,SAAOE,QAAP;AACD,CANqC;AAAA,UAGXP,kBAHW;AAAA,GAAjB;AAAA,UAGMA,kBAHN;AAAA,EAAhB;AAQP,OACA,MAAMQ,YAAY,GAACX,WAAW,CAAC;AAC7BY,EAAAA,IAAI,EAAC,SADwB;AAE7BR,EAAAA,YAF6B;AAG7BS,EAAAA,QAAQ,EAAE;AACNC,IAAAA,OAAO,EAAE,CAACN,KAAD,EAAQO,MAAR,KAAmB;AACxBP,MAAAA,KAAK,CAACH,IAAN,GAAWH,OAAO,CAACM,KAAK,CAACH,IAAP,CAAP,CAAoBW,MAApB,CAA2B,CAACC,IAAD,EAAMC,EAAN,KAAYA,EAAE,KAAGH,MAAM,CAACI,OAAnD,CAAX;AACH;AAHK,GAHmB;AAS7BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACFC,OADL,CACaf,UAAU,CAACgB,OADxB,EACgC,CAACf,KAAD,EAAOO,MAAP,KAAgB;AAC1CS,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD,KAHL,EAIKH,OAJL,CAIaf,UAAU,CAACmB,SAJxB,EAIkC,CAAClB,KAAD,EAAOO,MAAP,KAAgB;AAC5CP,MAAAA,KAAK,CAACH,IAAN,CAAWsB,IAAX,CAAgBZ,MAAM,CAACI,OAAvB;AACD,KANL,EAOKG,OAPL,CAOaf,UAAU,CAACqB,QAPxB,EAOiC,CAACpB,KAAD,EAAOO,MAAP,KAAgB;AAC3CS,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD,KATL,EAUKI,cAVL,CAUoB,MAAM,CAAE,CAV5B;AAWH;AArB8B,CAAD,CAA9B;AAwBA,MAAM;AAACC,EAAAA,OAAD;AAAUC,EAAAA;AAAV,IAAqBpB,YAA3B;AAEA,eAAeoB,OAAf;AAEA,OAAO,MAAM;AACXjB,EAAAA;AADW,IAETgB,OAFG","sourcesContent":["import {createSlice,createAsyncThunk,current} from \"@reduxjs/toolkit\"\r\nimport useWeatherServices from '../../services/WeatherApi'\r\n\r\nconst initialState = {\r\n  data:[],\r\n  city:''\r\n}\r\n\r\nexport const searchCity=createAsyncThunk(\r\n  'weather/searchCity',\r\n  async(state)=>{\r\n    const {getWeatherByCity}=useWeatherServices();\r\n    const response= await getWeatherByCity(state)\r\n    return response\r\n  }\r\n)\r\nexport \r\nconst WeatherSlice=createSlice({\r\n  name:'weather',\r\n  initialState,\r\n  reducers: {\r\n      delCity: (state, action) => {\r\n          state.data=current(state.data).filter((item,id)=>(id!==action.payload))\r\n      }\r\n  },\r\n\r\n  extraReducers: (builder) => {\r\n    builder\r\n        .addCase(searchCity.pending,(state,action)=>{\r\n          console.log('Download date city')\r\n        })\r\n        .addCase(searchCity.fulfilled,(state,action)=>{\r\n          state.data.push(action.payload)         \r\n        })\r\n        .addCase(searchCity.rejected,(state,action)=>{\r\n          console.log('error')\r\n        })\r\n        .addDefaultCase(() => {})\r\n}\r\n})\r\n\r\nconst {actions, reducer} = WeatherSlice;\r\n\r\nexport default reducer;\r\n\r\nexport const {\r\n  delCity\r\n} = actions;"]},"metadata":{},"sourceType":"module"}