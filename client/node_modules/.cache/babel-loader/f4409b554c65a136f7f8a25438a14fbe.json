{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useHttp } from '../hooks/http.hook';\n\nconst useMarvelServices = () => {\n  _s();\n\n  const {\n    loading,\n    request,\n    error,\n    clearError\n  } = useHttp();\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n  const _apikey = 'apikey=92ce9d18622727f3eb0082966398b836'; //411329137e60d3da9751a8e30c0c26a9\n\n  const _baseOffset = 210;\n  const _baseOffsetComics = 0; // https://gateway.marvel.com:443/v1/public/comics?limit=6&apikey=411329137e60d3da9751a8e30c0c26a9\n\n  const getAllCharacters = async function () {\n    let offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _baseOffset;\n    //если ничего не передать туда исползуется 210\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apikey}`);\n    return res.data.results.map(_transformCharacter); //так это массив персонажей мы их с помощью map меняем и в итоге формуруется массив с уже имененными и удобными объектами \n  };\n\n  const getCharacter = async id => {\n    const res = await request(`${_apiBase}characters/${id}?${_apikey}`);\n    return _transformCharacter(res.data.results[0]);\n  };\n\n  const getAllComics = async function () {\n    let offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _baseOffsetComics;\n    const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apikey}`);\n    return res.data.results.map(_transformComics);\n  };\n\n  const getComics = async id => {\n    const res = await request(`${_apiBase}comics/${id}?${_apikey}`);\n    return _transformComics(res.data.results[0]);\n  };\n\n  const _transformCharacter = char => {\n    if (char.description.length > 120) char.description = char.description.slice(0, 120) + '...';\n    return {\n      id: char.id,\n      name: char.name,\n      description: char.description || 'No data yet',\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items\n    };\n  };\n\n  const _transformComics = comics => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      description: comics.description || 'No data yet',\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n      language: comics.textObjects.language || 'en-us',\n      price: comics.prices.price\n    };\n  };\n\n  return {\n    loading,\n    error,\n    getAllCharacters,\n    getCharacter,\n    clearError,\n    getAllComics,\n    getComics\n  };\n};\n\n_s(useMarvelServices, \"S4xgG2RYqZG7qBvRpYmUwwkIwJ0=\", false, function () {\n  return [useHttp];\n});\n\nexport default useMarvelServices;","map":{"version":3,"sources":["C:/Users/svary/OneDrive/Рабочий стол/Auth/client/src/services/MarvelServices.js"],"names":["useHttp","useMarvelServices","loading","request","error","clearError","_apiBase","_apikey","_baseOffset","_baseOffsetComics","getAllCharacters","offset","res","data","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","getComics","char","description","length","slice","name","thumbnail","path","extension","homepage","urls","url","wiki","comics","items","title","pageCount","language","textObjects","price","prices"],"mappings":"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","sourcesContent":["import {useHttp} from '../hooks/http.hook';\r\n\r\nconst  useMarvelServices=()=>{\r\n  const {loading,request,error,clearError}=useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const  _apikey = 'apikey=92ce9d18622727f3eb0082966398b836';//411329137e60d3da9751a8e30c0c26a9\r\n  const  _baseOffset = 210;\r\n  const _baseOffsetComics=0;\r\n  // https://gateway.marvel.com:443/v1/public/comics?limit=6&apikey=411329137e60d3da9751a8e30c0c26a9\r\n\r\n  const getAllCharacters = async(offset=_baseOffset) => {//если ничего не передать туда исползуется 210\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apikey}`)\r\n    return res.data.results.map(_transformCharacter);//так это массив персонажей мы их с помощью map меняем и в итоге формуруется массив с уже имененными и удобными объектами \r\n  }\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apikey}`)\r\n    return _transformCharacter(res.data.results[0])\r\n\r\n  }\r\n  const getAllComics=async(offset=_baseOffsetComics)=>{\r\n    const res=await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apikey}`)\r\n    return res.data.results.map(_transformComics);\r\n  }\r\n  const getComics=async(id)=>{\r\n    const res=await request(`${_apiBase}comics/${id}?${_apikey}`)\r\n    return _transformComics(res.data.results[0]);\r\n  }\r\n const  _transformCharacter = (char) => {\r\n    if (char.description.length>120) char.description=char.description.slice(0,120)+'...'\r\n    return {\r\n        id:char.id,\r\n        name: char.name,\r\n        description: char.description || 'No data yet',\r\n        thumbnail: char.thumbnail.path + '.'+char.thumbnail.extension,\r\n        homepage: char.urls[0].url,\r\n        wiki:char.urls[1].url,\r\n        comics: char.comics.items\r\n      }\r\n  }\r\n  const  _transformComics = (comics) => {\r\n  \r\n    return {\r\n        id:comics.id,\r\n        title: comics.title,\r\n        description: comics.description || 'No data yet',\r\n        pageCount:comics.pageCount ? `${comics.pageCount} p.`:'No information about the number of pages' ,\r\n        thumbnail: comics.thumbnail.path + '.'+comics.thumbnail.extension,\r\n        language:comics.textObjects.language || 'en-us',\r\n        price: comics.prices.price \r\n      }\r\n  }\r\n\r\n  return {loading,error,getAllCharacters,getCharacter,clearError,getAllComics,getComics}\r\n}\r\nexport default useMarvelServices;"]},"metadata":{},"sourceType":"module"}