{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { createSlice, createAsyncThunk, current } from \"@reduxjs/toolkit\";\nimport useWeatherServices from '../../services/WeatherApi';\nconst initialState = {\n  data: [],\n  cityInfo: {},\n  city: '',\n  allCities: [],\n  loading: false\n};\nexport const searchCity = _s(createAsyncThunk('weather/searchCity', _s(async state => {\n  _s();\n\n  const {\n    getWeatherByCity\n  } = useWeatherServices();\n  const response = await getWeatherByCity(state);\n  return response;\n}, \"Zw2WUmbvtFAN4IWB85tUxg+sMu4=\", false, function () {\n  return [useWeatherServices];\n})), \"Zw2WUmbvtFAN4IWB85tUxg+sMu4=\", false, function () {\n  return [useWeatherServices];\n});\nexport const localCity = _s2(createAsyncThunk('weather/localCity', _s2(async state => {\n  _s2();\n\n  const {\n    getUserIp\n  } = useIpServices();\n  const response = await getU;\n}, \"HSnLeCqpu7Fe4gVoRYj1McK2h1M=\", true)), \"HSnLeCqpu7Fe4gVoRYj1McK2h1M=\", true);\nexport const weatherInfo = _s3(createAsyncThunk('weather/weatherInfo', _s3(async state => {\n  _s3();\n\n  const {\n    getWeatherByDays\n  } = useWeatherServices();\n  const response = await getWeatherByDays(state);\n  return response;\n}, \"c1UmGJW3mafAFSWI5cLrHD8/nQE=\", false, function () {\n  return [useWeatherServices];\n})), \"c1UmGJW3mafAFSWI5cLrHD8/nQE=\", false, function () {\n  return [useWeatherServices];\n});\nconst WeatherSlice = createSlice({\n  name: 'weather',\n  initialState,\n  reducers: {\n    delCity: (state, action) => {\n      state.data = current(state.data).filter((item, id) => id !== action.payload);\n      state.allCities = current(state.allCities).filter((item, id) => id !== action.payload);\n      localStorage.setItem('data', state.allCities);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(searchCity.pending, (state, action) => {\n      state.loading = true;\n    }).addCase(searchCity.fulfilled, (state, action) => {\n      state.data.push(action.payload);\n      state.allCities.push(action.payload.name);\n      localStorage.setItem('data', current(state.allCities));\n      state.loading = false;\n    }).addCase(searchCity.rejected, (state, action) => {\n      console.log('error');\n    }).addCase(weatherInfo.fulfilled, (state, action) => {\n      state.cityInfo = action.payload;\n    }).addCase(weatherInfo.rejected, (state, action) => {\n      console.log('error');\n    }).addDefaultCase(() => {});\n  }\n});\nconst {\n  actions,\n  reducer\n} = WeatherSlice;\nexport default reducer;\nexport const {\n  delCity\n} = actions;","map":{"version":3,"sources":["C:/Users/svary/OneDrive/Рабочий стол/Auth/client/src/components/weatherList/WeatherSlice.js"],"names":["createSlice","createAsyncThunk","current","useWeatherServices","initialState","data","cityInfo","city","allCities","loading","searchCity","state","getWeatherByCity","response","localCity","getUserIp","useIpServices","getU","weatherInfo","getWeatherByDays","WeatherSlice","name","reducers","delCity","action","filter","item","id","payload","localStorage","setItem","extraReducers","builder","addCase","pending","fulfilled","push","rejected","console","log","addDefaultCase","actions","reducer"],"mappings":"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","sourcesContent":["import {createSlice,createAsyncThunk,current} from \"@reduxjs/toolkit\"\r\nimport useWeatherServices from '../../services/WeatherApi'\r\n\r\nconst initialState = {\r\n  data:[],\r\n  cityInfo:{},\r\n  city:'',\r\n  allCities:[],\r\n  loading:false\r\n}\r\n\r\nexport const searchCity=createAsyncThunk(\r\n  'weather/searchCity',\r\n  async(state)=>{\r\n    const {getWeatherByCity}=useWeatherServices();\r\n    const response= await getWeatherByCity(state)\r\n    return response\r\n  }\r\n)\r\nexport const localCity=createAsyncThunk(\r\n  'weather/localCity',\r\n  async(state)=>{\r\n    const {getUserIp}=useIpServices()\r\n    const response=await getU\r\n  }\r\n)\r\nexport const weatherInfo=createAsyncThunk(\r\n  'weather/weatherInfo',\r\n  async(state)=>{\r\n    const { getWeatherByDays } = useWeatherServices();\r\n    const response= await getWeatherByDays(state)\r\n    return response\r\n  }\r\n)\r\n\r\nconst WeatherSlice=createSlice({\r\n  name:'weather',\r\n  initialState,\r\n  reducers: {\r\n      delCity: (state, action) => {\r\n          state.data=current(state.data).filter((item,id)=>(id!==action.payload))\r\n          state.allCities=current(state.allCities).filter((item,id)=>(id!==action.payload))\r\n          localStorage.setItem('data',state.allCities)\r\n      }\r\n  },\r\n\r\n  extraReducers: (builder) => {\r\n    builder\r\n        .addCase(searchCity.pending,(state,action)=>{\r\n          state.loading=true;\r\n        })\r\n        .addCase(searchCity.fulfilled,(state,action)=>{\r\n          state.data.push(action.payload)\r\n          state.allCities.push(action.payload.name)\r\n          localStorage.setItem('data',current(state.allCities))\r\n          state.loading=false;         \r\n        })\r\n        .addCase(searchCity.rejected,(state,action)=>{\r\n          console.log('error')\r\n        })\r\n\r\n        .addCase(weatherInfo.fulfilled,(state,action)=>{\r\n          state.cityInfo=action.payload\r\n        })\r\n        .addCase(weatherInfo.rejected,(state,action)=>{\r\n          console.log('error')\r\n        })\r\n\r\n        .addDefaultCase(() => {})\r\n}\r\n})\r\n\r\nconst {actions, reducer} = WeatherSlice;\r\n\r\nexport default reducer;\r\n\r\nexport const {\r\n  delCity\r\n} = actions;"]},"metadata":{},"sourceType":"module"}