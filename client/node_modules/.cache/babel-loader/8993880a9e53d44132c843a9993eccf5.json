{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createSlice, createAsyncThunk, current } from \"@reduxjs/toolkit\";\nimport useWeatherServices from '../../services/WeatherApi';\nconst initialState = {\n  data: [],\n  weatherInfo: {},\n  city: ''\n};\nexport const searchCity = _s(createAsyncThunk('weather/searchCity', _s(async state => {\n  _s();\n\n  const {\n    getWeatherByCity\n  } = useWeatherServices();\n  const response = await getWeatherByCity(state);\n  return response;\n}, \"Zw2WUmbvtFAN4IWB85tUxg+sMu4=\", false, function () {\n  return [useWeatherServices];\n})), \"Zw2WUmbvtFAN4IWB85tUxg+sMu4=\", false, function () {\n  return [useWeatherServices];\n});\nexport const weatherInfo = _s2(createAsyncThunk('weather/weatherInfo', _s2(async state => {\n  _s2();\n\n  const {\n    getWeatherByDays\n  } = useWeatherServices();\n  const response = await getWeatherByDays(state);\n  return response;\n}, \"c1UmGJW3mafAFSWI5cLrHD8/nQE=\", false, function () {\n  return [useWeatherServices];\n})), \"c1UmGJW3mafAFSWI5cLrHD8/nQE=\", false, function () {\n  return [useWeatherServices];\n});\nconst WeatherSlice = createSlice({\n  name: 'weather',\n  initialState,\n  reducers: {\n    delCity: (state, action) => {\n      state.data = current(state.data).filter((item, id) => id !== action.payload);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(searchCity.pending, (state, action) => {\n      console.log('Download date city');\n    }).addCase(searchCity.fulfilled, (state, action) => {\n      state.data.push(action.payload);\n    }).addCase(searchCity.rejected, (state, action) => {\n      console.log('error');\n    }).addCase(weatherInfo.fulfilled, (state, action) => {\n      state.wInfo = action.payload;\n    }).addCase(weatherInfo.rejected, (state, action) => {\n      console.log('error');\n    }).addDefaultCase(() => {});\n  }\n});\nconst {\n  actions,\n  reducer\n} = WeatherSlice;\nexport default reducer;\nexport const {\n  delCity\n} = actions;","map":{"version":3,"sources":["C:/Users/svary/OneDrive/Рабочий стол/Auth/client/src/components/weatherList/WeatherSlice.js"],"names":["createSlice","createAsyncThunk","current","useWeatherServices","initialState","data","weatherInfo","city","searchCity","state","getWeatherByCity","response","getWeatherByDays","WeatherSlice","name","reducers","delCity","action","filter","item","id","payload","extraReducers","builder","addCase","pending","console","log","fulfilled","push","rejected","wInfo","addDefaultCase","actions","reducer"],"mappings":";;;AAAA,SAAQA,WAAR,EAAoBC,gBAApB,EAAqCC,OAArC,QAAmD,kBAAnD;AACA,OAAOC,kBAAP,MAA+B,2BAA/B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAC,EADc;AAEnBC,EAAAA,WAAW,EAAC,EAFO;AAGnBC,EAAAA,IAAI,EAAC;AAHc,CAArB;AAMA,OAAO,MAAMC,UAAU,MAACP,gBAAgB,CACtC,oBADsC,KAEtC,MAAMQ,KAAN,IAAc;AAAA;;AACZ,QAAM;AAACC,IAAAA;AAAD,MAAmBP,kBAAkB,EAA3C;AACA,QAAMQ,QAAQ,GAAE,MAAMD,gBAAgB,CAACD,KAAD,CAAtC;AACA,SAAOE,QAAP;AACD,CANqC;AAAA,UAGXR,kBAHW;AAAA,GAAjB;AAAA,UAGMA,kBAHN;AAAA,EAAhB;AASP,OAAO,MAAMG,WAAW,OAACL,gBAAgB,CACvC,qBADuC,MAEvC,MAAMQ,KAAN,IAAc;AAAA;;AACZ,QAAM;AAAEG,IAAAA;AAAF,MAAuBT,kBAAkB,EAA/C;AACA,QAAMQ,QAAQ,GAAE,MAAMC,gBAAgB,CAACH,KAAD,CAAtC;AACA,SAAOE,QAAP;AACD,CANsC;AAAA,UAGRR,kBAHQ;AAAA,GAAjB;AAAA,UAGSA,kBAHT;AAAA,EAAjB;AASP,MAAMU,YAAY,GAACb,WAAW,CAAC;AAC7Bc,EAAAA,IAAI,EAAC,SADwB;AAE7BV,EAAAA,YAF6B;AAG7BW,EAAAA,QAAQ,EAAE;AACNC,IAAAA,OAAO,EAAE,CAACP,KAAD,EAAQQ,MAAR,KAAmB;AACxBR,MAAAA,KAAK,CAACJ,IAAN,GAAWH,OAAO,CAACO,KAAK,CAACJ,IAAP,CAAP,CAAoBa,MAApB,CAA2B,CAACC,IAAD,EAAMC,EAAN,KAAYA,EAAE,KAAGH,MAAM,CAACI,OAAnD,CAAX;AACH;AAHK,GAHmB;AAS7BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACFC,OADL,CACahB,UAAU,CAACiB,OADxB,EACgC,CAAChB,KAAD,EAAOQ,MAAP,KAAgB;AAC1CS,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD,KAHL,EAIKH,OAJL,CAIahB,UAAU,CAACoB,SAJxB,EAIkC,CAACnB,KAAD,EAAOQ,MAAP,KAAgB;AAC5CR,MAAAA,KAAK,CAACJ,IAAN,CAAWwB,IAAX,CAAgBZ,MAAM,CAACI,OAAvB;AACD,KANL,EAOKG,OAPL,CAOahB,UAAU,CAACsB,QAPxB,EAOiC,CAACrB,KAAD,EAAOQ,MAAP,KAAgB;AAC3CS,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD,KATL,EAWKH,OAXL,CAWalB,WAAW,CAACsB,SAXzB,EAWmC,CAACnB,KAAD,EAAOQ,MAAP,KAAgB;AAC7CR,MAAAA,KAAK,CAACsB,KAAN,GAAYd,MAAM,CAACI,OAAnB;AACD,KAbL,EAcKG,OAdL,CAcalB,WAAW,CAACwB,QAdzB,EAckC,CAACrB,KAAD,EAAOQ,MAAP,KAAgB;AAC5CS,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD,KAhBL,EAkBKK,cAlBL,CAkBoB,MAAM,CAAE,CAlB5B;AAmBH;AA7B8B,CAAD,CAA9B;AAgCA,MAAM;AAACC,EAAAA,OAAD;AAAUC,EAAAA;AAAV,IAAqBrB,YAA3B;AAEA,eAAeqB,OAAf;AAEA,OAAO,MAAM;AACXlB,EAAAA;AADW,IAETiB,OAFG","sourcesContent":["import {createSlice,createAsyncThunk,current} from \"@reduxjs/toolkit\"\r\nimport useWeatherServices from '../../services/WeatherApi'\r\n\r\nconst initialState = {\r\n  data:[],\r\n  weatherInfo:{},\r\n  city:''\r\n}\r\n\r\nexport const searchCity=createAsyncThunk(\r\n  'weather/searchCity',\r\n  async(state)=>{\r\n    const {getWeatherByCity}=useWeatherServices();\r\n    const response= await getWeatherByCity(state)\r\n    return response\r\n  }\r\n)\r\n\r\nexport const weatherInfo=createAsyncThunk(\r\n  'weather/weatherInfo',\r\n  async(state)=>{\r\n    const { getWeatherByDays } = useWeatherServices();\r\n    const response= await getWeatherByDays(state)\r\n    return response\r\n  }\r\n)\r\n\r\nconst WeatherSlice=createSlice({\r\n  name:'weather',\r\n  initialState,\r\n  reducers: {\r\n      delCity: (state, action) => {\r\n          state.data=current(state.data).filter((item,id)=>(id!==action.payload))\r\n      }\r\n  },\r\n\r\n  extraReducers: (builder) => {\r\n    builder\r\n        .addCase(searchCity.pending,(state,action)=>{\r\n          console.log('Download date city')\r\n        })\r\n        .addCase(searchCity.fulfilled,(state,action)=>{\r\n          state.data.push(action.payload)         \r\n        })\r\n        .addCase(searchCity.rejected,(state,action)=>{\r\n          console.log('error')\r\n        })\r\n\r\n        .addCase(weatherInfo.fulfilled,(state,action)=>{\r\n          state.wInfo=action.payload\r\n        })\r\n        .addCase(weatherInfo.rejected,(state,action)=>{\r\n          console.log('error')\r\n        })\r\n\r\n        .addDefaultCase(() => {})\r\n}\r\n})\r\n\r\nconst {actions, reducer} = WeatherSlice;\r\n\r\nexport default reducer;\r\n\r\nexport const {\r\n  delCity\r\n} = actions;"]},"metadata":{},"sourceType":"module"}