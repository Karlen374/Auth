{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createSlice, createAsyncThunk, current } from \"@reduxjs/toolkit\";\nimport useWeatherServices from '../../services/WeatherApi';\nconst initialState = {\n  data: [],\n  cityInfo: {},\n  city: '',\n  allCities: [],\n  loading: false\n};\nexport const searchCity = _s(createAsyncThunk('weather/searchCity', _s(async state => {\n  _s();\n\n  const {\n    getWeatherByCity\n  } = useWeatherServices();\n  const response = await getWeatherByCity(state);\n  return response;\n}, \"Zw2WUmbvtFAN4IWB85tUxg+sMu4=\", false, function () {\n  return [useWeatherServices];\n})), \"Zw2WUmbvtFAN4IWB85tUxg+sMu4=\", false, function () {\n  return [useWeatherServices];\n});\nexport const weatherInfo = _s2(createAsyncThunk('weather/weatherInfo', _s2(async state => {\n  _s2();\n\n  const {\n    getWeatherByDays\n  } = useWeatherServices();\n  const response = await getWeatherByDays(state);\n  return response;\n}, \"c1UmGJW3mafAFSWI5cLrHD8/nQE=\", false, function () {\n  return [useWeatherServices];\n})), \"c1UmGJW3mafAFSWI5cLrHD8/nQE=\", false, function () {\n  return [useWeatherServices];\n});\nconst WeatherSlice = createSlice({\n  name: 'weather',\n  initialState,\n  reducers: {\n    delCity: (state, action) => {\n      state.data = current(state.data).filter((item, id) => id !== action.payload);\n      state.allCities = current(state.allCities).filter((item, id) => id !== action.payload);\n      localStorage.setItem('data', state.allCities);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(searchCity.pending, (state, action) => {\n      state.loading;\n    }).addCase(searchCity.fulfilled, (state, action) => {\n      state.data.push(action.payload);\n      state.allCities.push(action.payload.name);\n      localStorage.setItem('data', current(state.allCities));\n    }).addCase(searchCity.rejected, (state, action) => {\n      console.log('error');\n    }).addCase(weatherInfo.fulfilled, (state, action) => {\n      state.cityInfo = action.payload;\n    }).addCase(weatherInfo.rejected, (state, action) => {\n      console.log('error');\n    }).addDefaultCase(() => {});\n  }\n});\nconst {\n  actions,\n  reducer\n} = WeatherSlice;\nexport default reducer;\nexport const {\n  delCity\n} = actions;","map":{"version":3,"sources":["C:/Users/svary/OneDrive/Рабочий стол/Auth/client/src/components/weatherList/WeatherSlice.js"],"names":["createSlice","createAsyncThunk","current","useWeatherServices","initialState","data","cityInfo","city","allCities","loading","searchCity","state","getWeatherByCity","response","weatherInfo","getWeatherByDays","WeatherSlice","name","reducers","delCity","action","filter","item","id","payload","localStorage","setItem","extraReducers","builder","addCase","pending","fulfilled","push","rejected","console","log","addDefaultCase","actions","reducer"],"mappings":"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","sourcesContent":["import {createSlice,createAsyncThunk,current} from \"@reduxjs/toolkit\"\r\nimport useWeatherServices from '../../services/WeatherApi'\r\n\r\nconst initialState = {\r\n  data:[],\r\n  cityInfo:{},\r\n  city:'',\r\n  allCities:[],\r\n  loading:false\r\n}\r\n\r\nexport const searchCity=createAsyncThunk(\r\n  'weather/searchCity',\r\n  async(state)=>{\r\n    const {getWeatherByCity}=useWeatherServices();\r\n    const response= await getWeatherByCity(state)\r\n    return response\r\n  }\r\n)\r\n\r\nexport const weatherInfo=createAsyncThunk(\r\n  'weather/weatherInfo',\r\n  async(state)=>{\r\n    const { getWeatherByDays } = useWeatherServices();\r\n    const response= await getWeatherByDays(state)\r\n    return response\r\n  }\r\n)\r\n\r\nconst WeatherSlice=createSlice({\r\n  name:'weather',\r\n  initialState,\r\n  reducers: {\r\n      delCity: (state, action) => {\r\n          state.data=current(state.data).filter((item,id)=>(id!==action.payload))\r\n          state.allCities=current(state.allCities).filter((item,id)=>(id!==action.payload))\r\n          localStorage.setItem('data',state.allCities)\r\n      }\r\n  },\r\n\r\n  extraReducers: (builder) => {\r\n    builder\r\n        .addCase(searchCity.pending,(state,action)=>{\r\n          state.loading\r\n        })\r\n        .addCase(searchCity.fulfilled,(state,action)=>{\r\n          state.data.push(action.payload)\r\n          state.allCities.push(action.payload.name)\r\n          localStorage.setItem('data',current(state.allCities))         \r\n        })\r\n        .addCase(searchCity.rejected,(state,action)=>{\r\n          console.log('error')\r\n        })\r\n\r\n        .addCase(weatherInfo.fulfilled,(state,action)=>{\r\n          state.cityInfo=action.payload\r\n        })\r\n        .addCase(weatherInfo.rejected,(state,action)=>{\r\n          console.log('error')\r\n        })\r\n\r\n        .addDefaultCase(() => {})\r\n}\r\n})\r\n\r\nconst {actions, reducer} = WeatherSlice;\r\n\r\nexport default reducer;\r\n\r\nexport const {\r\n  delCity\r\n} = actions;"]},"metadata":{},"sourceType":"module"}