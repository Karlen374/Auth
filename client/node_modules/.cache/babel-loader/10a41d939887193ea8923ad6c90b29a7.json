{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\svary\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\Auth\\\\client\\\\src\\\\components\\\\weatherList\\\\WeatherList.js\",\n    _s = $RefreshSig$();\n\nimport './WeatherList.css';\nimport { useEffect, useState } from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport { useDispatch, useSelector, getState } from 'react-redux';\nimport { searchCity, localCity } from './WeatherSlice';\nimport WeatherItems from '../weatherItems/WeatherItems';\nimport useWeatherServices from '../../services/WeatherApi';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport TextField from '@mui/material/TextField';\nimport Stack from '@mui/material/Stack';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Modal from '../Modal/Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst WeatherList = () => {\n  _s();\n\n  const [modalActive, setModalActive] = useState(true);\n  const [weatherCity, setWeatherCity] = useState('');\n  const {\n    userCity,\n    loading\n  } = useSelector(store => store.weather);\n  const dispatch = useDispatch();\n  const {\n    getAutoCompleteCityName\n  } = useWeatherServices();\n  const [variables, setVariables] = useState([]);\n\n  const onUpdateCity = e => {\n    setWeatherCity(e.target.value);\n  };\n\n  useEffect(() => {\n    if (localStorage.getItem('data')) {\n      const data = localStorage.getItem('data').split(',');\n\n      for (let i = 0; i < data.length; i++) {\n        if (data[i]) dispatch(searchCity(data[i]));\n      }\n    }\n\n    dispatch(localCity());\n  }, []);\n  useEffect(async () => {\n    if (weatherCity.length > 3) {\n      const response = await getAutoCompleteCityName(weatherCity);\n      setVariables(response);\n    }\n  }, [weatherCity]);\n\n  const addCity = () => {\n    dispatch(searchCity(weatherCity));\n    setWeatherCity('');\n  };\n\n  const View = userCity ? `${userCity} is your City?` : null;\n  const content = loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n    animation: \"border\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 23\n  }, this) : /*#__PURE__*/_jsxDEV(WeatherItems, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 54\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      active: modalActive,\n      setActive: setModalActive,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [userCity, \" is your City ?\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"\",\n        variant: \"success\",\n        children: \"Yes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"modal__btn\",\n        variant: \"danger\",\n        children: \"No\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-panel\",\n      children: [View, /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Add...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 2,\n        sx: {\n          width: 300\n        },\n        children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n          id: \"free-solo-demo\",\n          freeSolo: true,\n          options: variables.map(option => option.name),\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            value: weatherCity,\n            onChange: onUpdateCity,\n            label: \"Add...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 34\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: addCity,\n        variant: \"outline-success\",\n        children: \"Add\\u0432\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 5\n      }, this), ' ']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 3\n    }, this), content]\n  }, void 0, true);\n};\n\n_s(WeatherList, \"z3S0OiP0Nziax9KPFViUlvNaOwM=\", false, function () {\n  return [useSelector, useDispatch, useWeatherServices];\n});\n\n_c = WeatherList;\nexport default WeatherList;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherList\");","map":{"version":3,"sources":["C:/Users/svary/OneDrive/Рабочий стол/Auth/client/src/components/weatherList/WeatherList.js"],"names":["useEffect","useState","Button","useDispatch","useSelector","getState","searchCity","localCity","WeatherItems","useWeatherServices","Autocomplete","TextField","Stack","Spinner","Modal","WeatherList","modalActive","setModalActive","weatherCity","setWeatherCity","userCity","loading","store","weather","dispatch","getAutoCompleteCityName","variables","setVariables","onUpdateCity","e","target","value","localStorage","getItem","data","split","i","length","response","addCity","View","content","width","map","option","name","params"],"mappings":";;;AAAA,OAAO,mBAAP;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAmC,OAAnC;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAkCC,QAAlC,QAAkD,aAAlD;AACA,SAAQC,UAAR,EAAmBC,SAAnB,QAAmC,gBAAnC;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,kBAAP,MAA+B,2BAA/B;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;;;;AAEA,MAAMC,WAAW,GAAC,MAAI;AAAA;;AACtB,QAAM,CAACC,WAAD,EAAaC,cAAb,IAA6BhB,QAAQ,CAAC,IAAD,CAA3C;AAGA,QAAM,CAACiB,WAAD,EAAaC,cAAb,IAA6BlB,QAAQ,CAAC,EAAD,CAA3C;AACA,QAAM;AAACmB,IAAAA,QAAD;AAAUC,IAAAA;AAAV,MAAqBjB,WAAW,CAACkB,KAAK,IAAIA,KAAK,CAACC,OAAhB,CAAtC;AACA,QAAMC,QAAQ,GAACrB,WAAW,EAA1B;AACA,QAAM;AAAEsB,IAAAA;AAAF,MAA8BhB,kBAAkB,EAAtD;AACA,QAAM,CAACiB,SAAD,EAAWC,YAAX,IAAyB1B,QAAQ,CAAC,EAAD,CAAvC;;AAGA,QAAM2B,YAAY,GAAEC,CAAD,IAAK;AACtBV,IAAAA,cAAc,CAACU,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;AACD,GAFD;;AAIA/B,EAAAA,SAAS,CAAC,MAAI;AACZ,QAAGgC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAH,EAAgC;AAChC,YAAMC,IAAI,GAACF,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BE,KAA7B,CAAmC,GAAnC,CAAX;;AACA,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACF,IAAI,CAACG,MAAnB,EAA0BD,CAAC,EAA3B,EAA8B;AAC5B,YAAGF,IAAI,CAACE,CAAD,CAAP,EAAYZ,QAAQ,CAAClB,UAAU,CAAC4B,IAAI,CAACE,CAAD,CAAL,CAAX,CAAR;AACb;AACF;;AACDZ,IAAAA,QAAQ,CAACjB,SAAS,EAAV,CAAR;AACC,GARQ,EAQP,EARO,CAAT;AAUAP,EAAAA,SAAS,CAAC,YAAS;AACjB,QAAGkB,WAAW,CAACmB,MAAZ,GAAmB,CAAtB,EAAyB;AACvB,YAAMC,QAAQ,GAAE,MAAMb,uBAAuB,CAACP,WAAD,CAA7C;AACAS,MAAAA,YAAY,CAACW,QAAD,CAAZ;AACD;AACF,GALQ,EAKP,CAACpB,WAAD,CALO,CAAT;;AAOA,QAAMqB,OAAO,GAAC,MAAI;AAChBf,IAAAA,QAAQ,CAAClB,UAAU,CAACY,WAAD,CAAX,CAAR;AACAC,IAAAA,cAAc,CAAC,EAAD,CAAd;AACD,GAHD;;AAKA,QAAMqB,IAAI,GAACpB,QAAQ,GAAE,GAAEA,QAAS,gBAAb,GAA6B,IAAhD;AACA,QAAMqB,OAAO,GAACpB,OAAO,gBAAC,QAAC,OAAD;AAAS,IAAA,SAAS,EAAC;AAAnB;AAAA;AAAA;AAAA;AAAA,UAAD,gBAAgC,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,UAArD;AACA,sBACE;AAAA,4BACA,QAAC,KAAD;AAAO,MAAA,MAAM,EAAEL,WAAf;AAA4B,MAAA,SAAS,EAAEC,cAAvC;AAAA,8BACE;AAAA,mBAAKG,QAAL;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,EAAlB;AAAqB,QAAA,OAAO,EAAC,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAA+B,QAAA,OAAO,EAAC,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAMA;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,iBAECoB,IAFD,eAGG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHH,eAKE,QAAC,KAAD;AAAO,QAAA,OAAO,EAAE,CAAhB;AAAmB,QAAA,EAAE,EAAE;AAAEE,UAAAA,KAAK,EAAE;AAAT,SAAvB;AAAA,+BACE,QAAC,YAAD;AACE,UAAA,EAAE,EAAC,gBADL;AAEE,UAAA,QAAQ,MAFV;AAGE,UAAA,OAAO,EAAEhB,SAAS,CAACiB,GAAV,CAAeC,MAAD,IAAYA,MAAM,CAACC,IAAjC,CAHX;AAIE,UAAA,WAAW,EAAGC,MAAD,iBAAY,QAAC,SAAD,OAAeA,MAAf;AACW,YAAA,KAAK,EAAE5B,WADlB;AAEW,YAAA,QAAQ,EAAEU,YAFrB;AAGW,YAAA,KAAK,EAAC;AAHjB;AAAA;AAAA;AAAA;AAAA;AAJ3B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cALF,eAkBE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEW,OAAjB;AAA0B,QAAA,OAAO,EAAC,iBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBF,EAkBoE,GAlBpE;AAAA;AAAA;AAAA;AAAA;AAAA,YANA,EA4BCE,OA5BD;AAAA,kBADF;AAmCC,CA1ED;;GAAM1B,W;UAKqBX,W,EACZD,W,EACqBM,kB;;;KAP9BM,W;AA2EN,eAAeA,WAAf","sourcesContent":["import './WeatherList.css'\r\nimport { useEffect ,useState} from \"react\";\r\nimport Button from 'react-bootstrap/Button'\r\nimport { useDispatch, useSelector,getState } from 'react-redux';\r\nimport {searchCity,localCity} from './WeatherSlice';\r\nimport WeatherItems from '../weatherItems/WeatherItems';\r\nimport useWeatherServices from '../../services/WeatherApi';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport TextField from '@mui/material/TextField';\r\nimport Stack from '@mui/material/Stack';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Modal from '../Modal/Modal'\r\n\r\nconst WeatherList=()=>{\r\nconst [modalActive,setModalActive]=useState(true)\r\n\r\n\r\nconst [weatherCity,setWeatherCity]=useState('')\r\nconst {userCity,loading} = useSelector(store => store.weather);\r\nconst dispatch=useDispatch()\r\nconst { getAutoCompleteCityName } = useWeatherServices();\r\nconst [variables,setVariables]=useState([])\r\n\r\n\r\nconst onUpdateCity=(e)=>{\r\n  setWeatherCity(e.target.value)\r\n}\r\n\r\nuseEffect(()=>{\r\n  if(localStorage.getItem('data')){\r\n  const data=localStorage.getItem('data').split(',')\r\n  for(let i=0;i<data.length;i++){\r\n    if(data[i]) dispatch(searchCity(data[i]))\r\n  } \r\n}\r\ndispatch(localCity())\r\n},[])\r\n\r\nuseEffect(async()=>{\r\n  if(weatherCity.length>3) {\r\n    const response= await getAutoCompleteCityName(weatherCity)\r\n    setVariables(response)\r\n  }\r\n},[weatherCity])\r\n\r\nconst addCity=()=>{\r\n  dispatch(searchCity(weatherCity))\r\n  setWeatherCity('')\r\n}\r\n\r\nconst View=userCity?`${userCity} is your City?`:null;\r\nconst content=loading?<Spinner animation=\"border\" />:<WeatherItems/>\r\nreturn(\r\n  <>\r\n  <Modal active={modalActive} setActive={setModalActive}>\r\n    <h3>{userCity} is your City ?</h3>\r\n    <Button className='' variant=\"success\">Yes</Button>\r\n    <Button className='modal__btn' variant=\"danger\">No</Button>\r\n  </Modal>\r\n  <div className=\"search-panel\">\r\n\r\n  {View}\r\n     <h3>Add...</h3>\r\n      \r\n    <Stack spacing={2} sx={{ width: 300 }}>\r\n      <Autocomplete\r\n        id=\"free-solo-demo\"\r\n        freeSolo\r\n        options={variables.map((option) => option.name)}\r\n        renderInput={(params) => <TextField {...params} \r\n                                            value={weatherCity}\r\n                                            onChange={onUpdateCity} \r\n                                            label=\"Add...\" />}\r\n      />\r\n     \r\n    </Stack>\r\n    \r\n    <Button onClick={addCity} variant=\"outline-success\">Addв</Button>{' '}\r\n\r\n  </div>\r\n  \r\n  {content}\r\n\r\n  </>\r\n)\r\n  \r\n\r\n}\r\nexport default WeatherList;"]},"metadata":{},"sourceType":"module"}