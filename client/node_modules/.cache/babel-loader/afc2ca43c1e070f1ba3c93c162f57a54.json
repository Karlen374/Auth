{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createSlice, createAsyncThunk, current } from \"@reduxjs/toolkit\";\nimport useConversionServices from '../../services/ConversionApi';\nconst initialState = {\n  currency: '1',\n  convertCurrency: '',\n  inputVal: 'USD',\n  convertVal: 'RUB',\n  spinner: false,\n  result: false\n};\nexport const changeValue = _s(createAsyncThunk('value/changeValue', _s(async state => {\n  _s();\n\n  const {\n    getConvertValue\n  } = useConversionServices();\n  const response = getConvertValue(state);\n  return response;\n}, \"6AWbsKrk5RVEKP8PNf0dKzOqZAE=\", false, function () {\n  return [useConversionServices];\n})), \"6AWbsKrk5RVEKP8PNf0dKzOqZAE=\", false, function () {\n  return [useConversionServices];\n});\nconst ValueSlice = createSlice({\n  name: 'value',\n  initialState,\n  reducers: {\n    changeInputValue: (state, action) => {\n      state.inputVal = action.payload;\n    },\n    changeConvertValue: (state, action) => {\n      state.convertVal = action.payload;\n    },\n    onUpdateLocal: (state, action) => {\n      state.currency = action.payload;\n      state.result = false;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(changeValue.pending, (state, action) => {\n      state.spinner = true;\n      console.log('download');\n    }).addCase(changeValue.fulfilled, (state, action) => {\n      state.convertCurrency = action.payload.data[state.convertVal].value;\n      state.spinner = false;\n      state.result = true;\n    }).addCase(changeValue.rejected, (state, action) => {\n      console.log('error');\n    });\n  }\n});\nconst {\n  actions,\n  reducer\n} = ValueSlice;\nexport default reducer;\nexport const {\n  changeConvertValue,\n  changeInputValue,\n  onUpdateLocal\n} = actions;","map":{"version":3,"sources":["C:/Users/svary/OneDrive/Рабочий стол/Auth/client/src/components/exchangeValue/ValueSlice.js"],"names":["createSlice","createAsyncThunk","current","useConversionServices","initialState","currency","convertCurrency","inputVal","convertVal","spinner","result","changeValue","state","getConvertValue","response","ValueSlice","name","reducers","changeInputValue","action","payload","changeConvertValue","onUpdateLocal","extraReducers","builder","addCase","pending","console","log","fulfilled","data","value","rejected","actions","reducer"],"mappings":";;AAAA,SAAQA,WAAR,EAAoBC,gBAApB,EAAqCC,OAArC,QAAmD,kBAAnD;AACA,OAAOC,qBAAP,MAAkC,8BAAlC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAC,GADU;AAEnBC,EAAAA,eAAe,EAAC,EAFG;AAGnBC,EAAAA,QAAQ,EAAC,KAHU;AAInBC,EAAAA,UAAU,EAAC,KAJQ;AAKnBC,EAAAA,OAAO,EAAC,KALW;AAMnBC,EAAAA,MAAM,EAAC;AANY,CAArB;AAQA,OAAO,MAAMC,WAAW,MAACV,gBAAgB,CACvC,mBADuC,KAEvC,MAAMW,KAAN,IAAc;AAAA;;AACZ,QAAM;AAACC,IAAAA;AAAD,MAAkBV,qBAAqB,EAA7C;AACA,QAAMW,QAAQ,GAACD,eAAe,CAACD,KAAD,CAA9B;AACA,SAAOE,QAAP;AACD,CANsC;AAAA,UAGbX,qBAHa;AAAA,GAAjB;AAAA,UAGIA,qBAHJ;AAAA,EAAjB;AASP,MAAMY,UAAU,GAACf,WAAW,CAAC;AAC3BgB,EAAAA,IAAI,EAAC,OADsB;AAE3BZ,EAAAA,YAF2B;AAG3Ba,EAAAA,QAAQ,EAAE;AACNC,IAAAA,gBAAgB,EAAC,CAACN,KAAD,EAAOO,MAAP,KAAgB;AAC/BP,MAAAA,KAAK,CAACL,QAAN,GAAeY,MAAM,CAACC,OAAtB;AAED,KAJK;AAKNC,IAAAA,kBAAkB,EAAC,CAACT,KAAD,EAAOO,MAAP,KAAgB;AACjCP,MAAAA,KAAK,CAACJ,UAAN,GAAiBW,MAAM,CAACC,OAAxB;AAED,KARK;AASNE,IAAAA,aAAa,EAAC,CAACV,KAAD,EAAOO,MAAP,KAAgB;AAC5BP,MAAAA,KAAK,CAACP,QAAN,GAAec,MAAM,CAACC,OAAtB;AACAR,MAAAA,KAAK,CAACF,MAAN,GAAa,KAAb;AACD;AAZK,GAHiB;AAkB3Ba,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWd,WAAW,CAACe,OADvB,EAC+B,CAACd,KAAD,EAAOO,MAAP,KAAgB;AAC3CP,MAAAA,KAAK,CAACH,OAAN,GAAc,IAAd;AACAkB,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACD,KAJH,EAKGH,OALH,CAKWd,WAAW,CAACkB,SALvB,EAKiC,CAACjB,KAAD,EAAOO,MAAP,KAAgB;AAC7CP,MAAAA,KAAK,CAACN,eAAN,GAAsBa,MAAM,CAACC,OAAP,CAAeU,IAAf,CAAoBlB,KAAK,CAACJ,UAA1B,EAAsCuB,KAA5D;AACAnB,MAAAA,KAAK,CAACH,OAAN,GAAc,KAAd;AACAG,MAAAA,KAAK,CAACF,MAAN,GAAa,IAAb;AAED,KAVH,EAWGe,OAXH,CAWWd,WAAW,CAACqB,QAXvB,EAWgC,CAACpB,KAAD,EAAOO,MAAP,KAAgB;AAC5CQ,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD,KAbH;AAeH;AAlC4B,CAAD,CAA5B;AAqCA,MAAM;AAACK,EAAAA,OAAD;AAAUC,EAAAA;AAAV,IAAqBnB,UAA3B;AAEA,eAAemB,OAAf;AAEA,OAAO,MAAM;AACXb,EAAAA,kBADW;AAEXH,EAAAA,gBAFW;AAGXI,EAAAA;AAHW,IAITW,OAJG","sourcesContent":["import {createSlice,createAsyncThunk,current} from \"@reduxjs/toolkit\"\r\nimport useConversionServices from '../../services/ConversionApi'\r\n\r\nconst initialState = {\r\n  currency:'1',\r\n  convertCurrency:'',\r\n  inputVal:'USD',\r\n  convertVal:'RUB',\r\n  spinner:false,\r\n  result:false\r\n}\r\nexport const changeValue=createAsyncThunk(\r\n  'value/changeValue',\r\n  async(state)=>{\r\n    const {getConvertValue}=useConversionServices();\r\n    const response=getConvertValue(state)\r\n    return response\r\n  }\r\n\r\n)\r\nconst ValueSlice=createSlice({\r\n  name:'value',\r\n  initialState,\r\n  reducers: {\r\n      changeInputValue:(state,action)=>{\r\n        state.inputVal=action.payload\r\n        \r\n      },\r\n      changeConvertValue:(state,action)=>{\r\n        state.convertVal=action.payload;\r\n        \r\n      },\r\n      onUpdateLocal:(state,action)=>{\r\n        state.currency=action.payload;\r\n        state.result=false;\r\n      }\r\n  },\r\n\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(changeValue.pending,(state,action)=>{\r\n        state.spinner=true\r\n        console.log('download')\r\n      })\r\n      .addCase(changeValue.fulfilled,(state,action)=>{\r\n        state.convertCurrency=action.payload.data[state.convertVal].value\r\n        state.spinner=false\r\n        state.result=true\r\n      \r\n      })\r\n      .addCase(changeValue.rejected,(state,action)=>{\r\n        console.log('error')\r\n      })\r\n       \r\n}\r\n})\r\n\r\nconst {actions, reducer} = ValueSlice;\r\n\r\nexport default reducer;\r\n\r\nexport const {\r\n  changeConvertValue,\r\n  changeInputValue,\r\n  onUpdateLocal\r\n} = actions;"]},"metadata":{},"sourceType":"module"}