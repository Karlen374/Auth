{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createSlice, createAsyncThunk, current } from \"@reduxjs/toolkit\";\nimport useWeatherServices from '../../services/WeatherApi';\nconst initialState = {\n  data: [],\n  city: ''\n};\nexport const searchCity = _s(createAsyncThunk('weather/searchCity', _s(async state => {\n  _s();\n\n  const {\n    getWeatherByCity\n  } = useWeatherServices();\n  const response = await getWeatherByCity(state);\n  return response;\n}, \"Zw2WUmbvtFAN4IWB85tUxg+sMu4=\", false, function () {\n  return [useWeatherServices];\n})), \"Zw2WUmbvtFAN4IWB85tUxg+sMu4=\", false, function () {\n  return [useWeatherServices];\n});\nconst WeatherSlice = createSlice({\n  name: 'weather',\n  initialState,\n  reducers: {\n    delCity: (state, action) => {\n      console.log(current(state.data));\n      console.log(action.payload);\n      currentstate.data.filter((item, id) => id !== index);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(searchCity.pending, (state, action) => {\n      console.log('Download date city');\n    }).addCase(searchCity.fulfilled, (state, action) => {\n      state.data.push(action.payload); // console.log('data=',current(state.data))\n      // console.log('action=',action)\n    }).addCase(searchCity.rejected, (state, action) => {\n      console.log('error');\n    }).addDefaultCase(() => {});\n  }\n});\nconst {\n  actions,\n  reducer\n} = WeatherSlice;\nexport default reducer;\nexport const {\n  delCity\n} = actions;","map":{"version":3,"sources":["C:/Users/svary/OneDrive/Рабочий стол/Auth/client/src/components/weatherList/WeatherSlice.js"],"names":["createSlice","createAsyncThunk","current","useWeatherServices","initialState","data","city","searchCity","state","getWeatherByCity","response","WeatherSlice","name","reducers","delCity","action","console","log","payload","currentstate","filter","item","id","index","extraReducers","builder","addCase","pending","fulfilled","push","rejected","addDefaultCase","actions","reducer"],"mappings":";;AAAA,SAAQA,WAAR,EAAoBC,gBAApB,EAAqCC,OAArC,QAAmD,kBAAnD;AACA,OAAOC,kBAAP,MAA+B,2BAA/B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAC,EADc;AAEnBC,EAAAA,IAAI,EAAC;AAFc,CAArB;AAMA,OAAO,MAAMC,UAAU,MAACN,gBAAgB,CACtC,oBADsC,KAEtC,MAAMO,KAAN,IAAc;AAAA;;AACZ,QAAM;AAACC,IAAAA;AAAD,MAAmBN,kBAAkB,EAA3C;AACA,QAAMO,QAAQ,GAAE,MAAMD,gBAAgB,CAACD,KAAD,CAAtC;AACA,SAAOE,QAAP;AACD,CANqC;AAAA,UAGXP,kBAHW;AAAA,GAAjB;AAAA,UAGMA,kBAHN;AAAA,EAAhB;AASP,MAAMQ,YAAY,GAACX,WAAW,CAAC;AAC7BY,EAAAA,IAAI,EAAC,SADwB;AAE7BR,EAAAA,YAF6B;AAG7BS,EAAAA,QAAQ,EAAE;AACNC,IAAAA,OAAO,EAAE,CAACN,KAAD,EAAQO,MAAR,KAAmB;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAYf,OAAO,CAACM,KAAK,CAACH,IAAP,CAAnB;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,OAAnB;AACAC,MAAAA,YAAY,CAACd,IAAb,CAAkBe,MAAlB,CAAyB,CAACC,IAAD,EAAMC,EAAN,KAAYA,EAAE,KAAGC,KAA1C;AACH;AALK,GAHmB;AAW7BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACFC,OADL,CACanB,UAAU,CAACoB,OADxB,EACgC,CAACnB,KAAD,EAAOO,MAAP,KAAgB;AAC1CC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD,KAHL,EAIKS,OAJL,CAIanB,UAAU,CAACqB,SAJxB,EAIkC,CAACpB,KAAD,EAAOO,MAAP,KAAgB;AAC5CP,MAAAA,KAAK,CAACH,IAAN,CAAWwB,IAAX,CAAgBd,MAAM,CAACG,OAAvB,EAD4C,CAE5C;AACA;AACD,KARL,EASKQ,OATL,CASanB,UAAU,CAACuB,QATxB,EASiC,CAACtB,KAAD,EAAOO,MAAP,KAAgB;AAC3CC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD,KAXL,EAYKc,cAZL,CAYoB,MAAM,CAAE,CAZ5B;AAaH;AAzB8B,CAAD,CAA9B;AA4BA,MAAM;AAACC,EAAAA,OAAD;AAAUC,EAAAA;AAAV,IAAqBtB,YAA3B;AAEA,eAAesB,OAAf;AAEA,OAAO,MAAM;AACXnB,EAAAA;AADW,IAETkB,OAFG","sourcesContent":["import {createSlice,createAsyncThunk,current} from \"@reduxjs/toolkit\"\r\nimport useWeatherServices from '../../services/WeatherApi'\r\n\r\nconst initialState = {\r\n  data:[],\r\n  city:''\r\n}\r\n\r\n\r\nexport const searchCity=createAsyncThunk(\r\n  'weather/searchCity',\r\n  async(state)=>{\r\n    const {getWeatherByCity}=useWeatherServices();\r\n    const response= await getWeatherByCity(state)\r\n    return response\r\n  }\r\n)\r\n\r\nconst WeatherSlice=createSlice({\r\n  name:'weather',\r\n  initialState,\r\n  reducers: {\r\n      delCity: (state, action) => {\r\n          console.log(current(state.data))\r\n          console.log(action.payload)\r\n          currentstate.data.filter((item,id)=>(id!==index))\r\n      }\r\n  },\r\n\r\n  extraReducers: (builder) => {\r\n    builder\r\n        .addCase(searchCity.pending,(state,action)=>{\r\n          console.log('Download date city')\r\n        })\r\n        .addCase(searchCity.fulfilled,(state,action)=>{\r\n          state.data.push(action.payload)\r\n          // console.log('data=',current(state.data))\r\n          // console.log('action=',action)\r\n        })\r\n        .addCase(searchCity.rejected,(state,action)=>{\r\n          console.log('error')\r\n        })\r\n        .addDefaultCase(() => {})\r\n}\r\n})\r\n\r\nconst {actions, reducer} = WeatherSlice;\r\n\r\nexport default reducer;\r\n\r\nexport const {\r\n  delCity\r\n} = actions;"]},"metadata":{},"sourceType":"module"}