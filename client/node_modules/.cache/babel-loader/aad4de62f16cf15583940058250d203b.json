{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createSlice, createAsyncThunk, current } from \"@reduxjs/toolkit\";\nimport useMarvelServices from \"../../services/MarvelServices\";\nconst initialState = {\n  data: [],\n  newItemLoading: false,\n  offset: 211,\n  charEnded: false,\n  selectedId: -1,\n  firstUpd: true\n};\nexport const getCharacters = _s(createAsyncThunk('char/getCharacters', _s(async state => {\n  _s();\n\n  console.log(state);\n  const {\n    getAllCharacters\n  } = useMarvelServices(); // const { getAllCharacters }=useMarvelServices();\n\n  const response = await getAllCharacters(state);\n  return response;\n}, \"ibinA0o7PGIUE+uvC9S9Hem2yjg=\", false, function () {\n  return [useMarvelServices];\n})), \"ibinA0o7PGIUE+uvC9S9Hem2yjg=\", false, function () {\n  return [useMarvelServices];\n});\nconst CharSlice = createSlice({\n  name: 'char',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getCharacters.pending, (state, action) => {\n      console.log('Loading Character');\n    }).addCase(getCharacters.fulfilled, (state, action) => {\n      console.log(action);\n      console.log('yes');\n    }).addCase(getCharacters.rejected, (state, action) => {\n      var _action$error;\n\n      console.log(action === null || action === void 0 ? void 0 : (_action$error = action.error) === null || _action$error === void 0 ? void 0 : _action$error.message);\n    });\n  }\n});\nconst {\n  actions,\n  reducer\n} = CharSlice;\nexport default reducer;\nexport const {} = actions;","map":{"version":3,"sources":["C:/Users/svary/OneDrive/Рабочий стол/Auth/client/src/components/charList/CharSlice.js"],"names":["createSlice","createAsyncThunk","current","useMarvelServices","initialState","data","newItemLoading","offset","charEnded","selectedId","firstUpd","getCharacters","state","console","log","getAllCharacters","response","CharSlice","name","reducers","extraReducers","builder","addCase","pending","action","fulfilled","rejected","error","message","actions","reducer"],"mappings":";;AAAA,SAAQA,WAAR,EAAoBC,gBAApB,EAAqCC,OAArC,QAAmD,kBAAnD;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAC,EADc;AAEnBC,EAAAA,cAAc,EAAC,KAFI;AAGnBC,EAAAA,MAAM,EAAC,GAHY;AAInBC,EAAAA,SAAS,EAAC,KAJS;AAKnBC,EAAAA,UAAU,EAAC,CAAC,CALO;AAMnBC,EAAAA,QAAQ,EAAC;AANU,CAArB;AASA,OAAO,MAAMC,aAAa,MAACV,gBAAgB,CACzC,oBADyC,KAEzC,MAAMW,KAAN,IAAc;AAAA;;AACZC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,QAAM;AAACG,IAAAA;AAAD,MAAmBZ,iBAAiB,EAA1C,CAFY,CAGZ;;AACA,QAAMa,QAAQ,GAAC,MAAMD,gBAAgB,CAACH,KAAD,CAArC;AACA,SAAOI,QAAP;AACD,CARwC;AAAA,UAIdb,iBAJc;AAAA,GAAjB;AAAA,UAIGA,iBAJH;AAAA,EAAnB;AAWP,MAAMc,SAAS,GAACjB,WAAW,CAAC;AAC1BkB,EAAAA,IAAI,EAAC,MADqB;AAE1Bd,EAAAA,YAF0B;AAG1Be,EAAAA,QAAQ,EAAE,EAHgB;AAM1BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWX,aAAa,CAACY,OADzB,EACiC,CAACX,KAAD,EAAOY,MAAP,KAAgB;AAC7CX,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD,KAHH,EAIGQ,OAJH,CAIWX,aAAa,CAACc,SAJzB,EAImC,CAACb,KAAD,EAAOY,MAAP,KAAgB;AAC/CX,MAAAA,OAAO,CAACC,GAAR,CAAYU,MAAZ;AACAX,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACD,KAPH,EAQGQ,OARH,CAQWX,aAAa,CAACe,QARzB,EAQkC,CAACd,KAAD,EAAOY,MAAP,KAAgB;AAAA;;AAC9CX,MAAAA,OAAO,CAACC,GAAR,CAAYU,MAAZ,aAAYA,MAAZ,wCAAYA,MAAM,CAAEG,KAApB,kDAAY,cAAeC,OAA3B;AACD,KAVH;AAYH;AAnB2B,CAAD,CAA3B;AAsBA,MAAM;AAACC,EAAAA,OAAD;AAAUC,EAAAA;AAAV,IAAqBb,SAA3B;AAEA,eAAea,OAAf;AAEA,OAAO,MAAM,KAETD,OAFG","sourcesContent":["import {createSlice,createAsyncThunk,current} from \"@reduxjs/toolkit\"\r\nimport useMarvelServices from \"../../services/MarvelServices\"\r\n\r\nconst initialState = {\r\n  data:[],\r\n  newItemLoading:false,\r\n  offset:211,\r\n  charEnded:false,\r\n  selectedId:-1,\r\n  firstUpd:true,\r\n}\r\n\r\nexport const getCharacters=createAsyncThunk(\r\n  'char/getCharacters',\r\n  async(state)=>{\r\n    console.log(state)\r\n    const {getAllCharacters}=useMarvelServices();\r\n    // const { getAllCharacters }=useMarvelServices();\r\n    const response=await getAllCharacters(state)\r\n    return response;\r\n  }\r\n)\r\n\r\nconst CharSlice=createSlice({\r\n  name:'char',\r\n  initialState,\r\n  reducers: {\r\n      \r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getCharacters.pending,(state,action)=>{\r\n        console.log('Loading Character')\r\n      })\r\n      .addCase(getCharacters.fulfilled,(state,action)=>{\r\n        console.log(action)\r\n        console.log('yes')\r\n      })\r\n      .addCase(getCharacters.rejected,(state,action)=>{\r\n        console.log(action?.error?.message)\r\n      })\r\n       \r\n}\r\n})\r\n\r\nconst {actions, reducer} = CharSlice;\r\n\r\nexport default reducer;\r\n\r\nexport const {\r\n  \r\n} = actions;"]},"metadata":{},"sourceType":"module"}