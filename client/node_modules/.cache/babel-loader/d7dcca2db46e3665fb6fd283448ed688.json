{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport login from '../components/loginPanel/LoginSlice';\nimport weather from '../components/weatherList/WeatherSlice';\nimport value from '../components/exchangeValue/ValueSlice';\nimport char from '../components/charList/CharSlice';\nimport food from '../components/';\n\nconst stringMiddleware = () => next => action => {\n  if (typeof action === 'string') {\n    return next({\n      type: action\n    });\n  }\n\n  return next(action);\n};\n\nconst store = configureStore({\n  reducer: {\n    login,\n    weather,\n    value,\n    char\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat(stringMiddleware),\n  devTools: process.env.NODE_ENV !== 'production'\n});\nexport default store;","map":{"version":3,"sources":["C:/Users/svary/OneDrive/Рабочий стол/Auth/client/src/store/index.js"],"names":["configureStore","login","weather","value","char","food","stringMiddleware","next","action","type","store","reducer","middleware","getDefaultMiddleware","concat","devTools","process","env","NODE_ENV"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,OAAOC,KAAP,MAAkB,qCAAlB;AACA,OAAOC,OAAP,MAAoB,wCAApB;AACA,OAAOC,KAAP,MAAkB,wCAAlB;AACA,OAAOC,IAAP,MAAiB,kCAAjB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;;AACA,MAAMC,gBAAgB,GAAG,MAAOC,IAAD,IAAWC,MAAD,IAAY;AACjD,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC5B,WAAOD,IAAI,CAAC;AACRE,MAAAA,IAAI,EAAED;AADE,KAAD,CAAX;AAGH;;AACD,SAAOD,IAAI,CAACC,MAAD,CAAX;AACH,CAPD;;AASA,MAAME,KAAK,GAAGV,cAAc,CAAC;AACzBW,EAAAA,OAAO,EAAE;AAACV,IAAAA,KAAD;AAAOC,IAAAA,OAAP;AAAeC,IAAAA,KAAf;AAAqBC,IAAAA;AAArB,GADgB;AAEzBQ,EAAAA,UAAU,EAAEC,oBAAoB,IAAIA,oBAAoB,GAAGC,MAAvB,CAA8BR,gBAA9B,CAFX;AAGzBS,EAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB;AAHV,CAAD,CAA5B;AAMA,eAAeR,KAAf","sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\r\nimport login from '../components/loginPanel/LoginSlice';\r\nimport weather from '../components/weatherList/WeatherSlice'\r\nimport value from '../components/exchangeValue/ValueSlice'\r\nimport char from '../components/charList/CharSlice'\r\nimport food from '../components/'\r\nconst stringMiddleware = () => (next) => (action) => {\r\n    if (typeof action === 'string') {\r\n        return next({\r\n            type: action\r\n        })\r\n    }\r\n    return next(action)\r\n};\r\n\r\nconst store = configureStore({\r\n    reducer: {login,weather,value,char},\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().concat(stringMiddleware),\r\n    devTools: process.env.NODE_ENV !== 'production',\r\n})\r\n\r\nexport default store;"]},"metadata":{},"sourceType":"module"}