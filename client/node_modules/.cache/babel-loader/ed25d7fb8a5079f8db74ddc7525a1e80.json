{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\svary\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\Auth\\\\client\\\\src\\\\components\\\\weatherList\\\\WeatherList.js\",\n    _s = $RefreshSig$();\n\nimport './WeatherList.css';\nimport { useEffect, useState } from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport { useDispatch, useSelector, getState } from 'react-redux';\nimport { searchCity } from './WeatherSlice';\nimport WeatherItems from '../weatherItems/WeatherItems';\nimport useWeatherServices from '../../services/WeatherApi';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport TextField from '@mui/material/TextField';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WeatherList = () => {\n  _s();\n\n  const [weatherCity, setWeatherCity] = useState(''); // const {data} = useSelector(store => store.weather);\n\n  const dispatch = useDispatch();\n  const {\n    getAutoCompleteCityName\n  } = useWeatherServices();\n  const [variables, setVariables] = useState([]);\n\n  const onUpdateCity = e => {\n    setWeatherCity(e.target.value);\n  };\n\n  useEffect(() => {\n    const data = localStorage.getItem('data').split(',');\n\n    for (let i = 0; i < data.length; i++) {\n      if (data[i]) dispatch(searchCity(data[i]));\n    }\n  }, []);\n  useEffect(async () => {\n    if (weatherCity.length > 3) {\n      const response = await getAutoCompleteCityName(weatherCity);\n      const data = [];\n\n      for (let i = 0; i < response.length; i++) {\n        const obj = {};\n        obj['label'] = response[i].name;\n        data.push(obj);\n      }\n\n      setVariables(data);\n    }\n  }, [weatherCity]);\n\n  const addCity = () => {\n    dispatch(searchCity(weatherCity));\n    setWeatherCity('');\n  };\n\n  const content = !variables ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(Autocomplete, {\n    disablePortal: true,\n    id: \"combo-box-demo\",\n    options: variables,\n    sx: {\n      width: 300\n    },\n    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n      label: \"Add...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 64\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 35\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"search-input\",\n        placeholder: \"Add...\",\n        value: weatherCity,\n        onChange: onUpdateCity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 2,\n        sx: {\n          width: 300\n        },\n        children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n          id: \"free-solo-demo\",\n          freeSolo: true,\n          options: top100Films.map(option => option.title),\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            label: \"freeSolo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 34\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n          freeSolo: true,\n          id: \"free-solo-2-demo\",\n          disableClearable: true,\n          options: top100Films.map(option => option.title),\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            label: \"Search input\",\n            InputProps: { ...params.InputProps,\n              type: 'search'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: addCity,\n        variant: \"outline-success\",\n        children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }, this), ' ']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(WeatherItems, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n};\n\n_s(WeatherList, \"qtjqOOHIdRn4EeYfJuMvz+7A+nY=\", false, function () {\n  return [useDispatch, useWeatherServices];\n});\n\n_c = WeatherList;\nexport default WeatherList;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherList\");","map":{"version":3,"sources":["C:/Users/svary/OneDrive/Рабочий стол/Auth/client/src/components/weatherList/WeatherList.js"],"names":["useEffect","useState","Button","useDispatch","useSelector","getState","searchCity","WeatherItems","useWeatherServices","Autocomplete","TextField","WeatherList","weatherCity","setWeatherCity","dispatch","getAutoCompleteCityName","variables","setVariables","onUpdateCity","e","target","value","data","localStorage","getItem","split","i","length","response","obj","name","push","addCity","content","width","params","top100Films","map","option","title","InputProps","type"],"mappings":"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","sourcesContent":["import './WeatherList.css'\r\nimport { useEffect ,useState} from \"react\";\r\nimport Button from 'react-bootstrap/Button'\r\nimport { useDispatch, useSelector,getState } from 'react-redux';\r\nimport {searchCity} from './WeatherSlice';\r\nimport WeatherItems from '../weatherItems/WeatherItems';\r\nimport useWeatherServices from '../../services/WeatherApi';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport TextField from '@mui/material/TextField';\r\n\r\nconst WeatherList=()=>{\r\n\r\nconst [weatherCity,setWeatherCity]=useState('')\r\n// const {data} = useSelector(store => store.weather);\r\nconst dispatch=useDispatch()\r\nconst { getAutoCompleteCityName } = useWeatherServices();\r\nconst [variables,setVariables]=useState([])\r\n\r\nconst onUpdateCity=(e)=>{\r\n  setWeatherCity(e.target.value)\r\n}\r\n\r\nuseEffect(()=>{\r\n  const data=localStorage.getItem('data').split(',')\r\n  for(let i=0;i<data.length;i++){\r\n    if(data[i]) dispatch(searchCity(data[i]))\r\n  }\r\n},[])\r\n\r\nuseEffect(async()=>{\r\n  if(weatherCity.length>3) {\r\n    const response= await getAutoCompleteCityName(weatherCity)\r\n    const data=[]\r\n    for (let i=0;i<response.length;i++){\r\n      const obj={}\r\n      obj['label']=response[i].name;\r\n      data.push(obj)\r\n    }\r\n    setVariables(data)\r\n  }\r\n},[weatherCity])\r\n\r\nconst addCity=()=>{\r\n  dispatch(searchCity(weatherCity))\r\n  setWeatherCity('')\r\n}\r\n\r\nconst content=!variables ? <></>: <Autocomplete\r\n                                      disablePortal\r\n                                      id=\"combo-box-demo\"\r\n                                      options={variables}\r\n                                      sx={{ width: 300 }}\r\n                                      renderInput={(params) => <TextField {...params} label=\"Add...\" />}/>\r\nreturn(\r\n  <>\r\n  <div className=\"search-panel\">\r\n\r\n     <h3>Добавление...</h3>\r\n      <input type=\"text\"\r\n             className=\"search-input\"\r\n             placeholder=\"Add...\"\r\n             value={weatherCity}\r\n             onChange={onUpdateCity}\r\n            />\r\n          <Stack spacing={2} sx={{ width: 300 }}>\r\n      <Autocomplete\r\n        id=\"free-solo-demo\"\r\n        freeSolo\r\n        options={top100Films.map((option) => option.title)}\r\n        renderInput={(params) => <TextField {...params} label=\"freeSolo\" />}\r\n      />\r\n      <Autocomplete\r\n        freeSolo\r\n        id=\"free-solo-2-demo\"\r\n        disableClearable\r\n        options={top100Films.map((option) => option.title)}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            label=\"Search input\"\r\n            InputProps={{\r\n              ...params.InputProps,\r\n              type: 'search',\r\n            }}\r\n          />\r\n        )}\r\n      />\r\n    </Stack>\r\n\r\n      <Button onClick={addCity} variant=\"outline-success\">Добавить</Button>{' '}\r\n\r\n     {/* {content} */}\r\n  </div>\r\n  <WeatherItems/>\r\n  </>\r\n)\r\n  \r\n\r\n}\r\nexport default WeatherList;"]},"metadata":{},"sourceType":"module"}