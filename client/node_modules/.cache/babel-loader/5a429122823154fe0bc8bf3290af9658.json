{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\nexport const useHttp = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const request = async function (url) {\n    let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';\n    let body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n      'Content-Type': 'application/json'\n    };\n    setLoading(true);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n\n      if (!response.ok) {\n        throw new Error(`Could not fetch ${url} status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  };\n\n  const clearError = useCallback(() => setError(null), []);\n  return {\n    loading,\n    request,\n    error,\n    clearError\n  };\n};\n\n_s(useHttp, \"WRF3HsPmuMV3+7hC6f0wKt5GjE0=\");","map":{"version":3,"sources":["C:/Users/svary/OneDrive/Рабочий стол/Auth/client/src/hooks/marvelHook.js"],"names":["useState","useCallback","useHttp","loading","setLoading","error","setError","request","url","method","body","headers","response","fetch","ok","Error","status","data","json","e","message","clearError"],"mappings":";;AAAA,SAASA,QAAT,EAAkBC,WAAlB,QAAqC,OAArC;AAEA,OAAO,MAAMC,OAAO,GAAC,MAAI;AAAA;;AACvB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;;AAEA,QAAMO,OAAO,GAAE,gBAAMC,GAAN,EAA+E;AAAA,QAArEC,MAAqE,uEAA9D,KAA8D;AAAA,QAAxDC,IAAwD,uEAAnD,IAAmD;AAAA,QAA9CC,OAA8C,uEAAtC;AAAC,sBAAe;AAAhB,KAAsC;AAC5FP,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAG;AACD,YAAMQ,QAAQ,GAAC,MAAMC,KAAK,CAACL,GAAD,EAAK;AAACC,QAAAA,MAAD;AAAQC,QAAAA,IAAR;AAAaC,QAAAA;AAAb,OAAL,CAA1B;;AACA,UAAI,CAACC,QAAQ,CAACE,EAAd,EAAiB;AACf,cAAM,IAAIC,KAAJ,CAAW,mBAAkBP,GAAI,YAAWI,QAAQ,CAACI,MAAO,EAA5D,CAAN;AACD;;AACD,YAAMC,IAAI,GAAC,MAAML,QAAQ,CAACM,IAAT,EAAjB;AAEAd,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,aAAOa,IAAP;AAGD,KAXD,CAWC,OAAME,CAAN,EAAQ;AACPf,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACa,CAAC,CAACC,OAAH,CAAR;AACA,YAAMD,CAAN;AACD;AACF,GAlBD;;AAoBA,QAAME,UAAU,GAACpB,WAAW,CAAC,MAAIK,QAAQ,CAAC,IAAD,CAAb,EAAoB,EAApB,CAA5B;AAEA,SAAM;AAACH,IAAAA,OAAD;AAASI,IAAAA,OAAT;AAAiBF,IAAAA,KAAjB;AAAuBgB,IAAAA;AAAvB,GAAN;AACD,CA3BM;;GAAMnB,O","sourcesContent":["import { useState,useCallback } from \"react\";\r\n\r\nexport const useHttp=()=>{\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n \r\n  const request=(async(url,method='GET',body=null,headers={'Content-Type':'application/json'})=>{\r\n    setLoading(true);\r\n    try{\r\n      const response=await fetch(url,{method,body,headers});\r\n      if (!response.ok){\r\n        throw new Error(`Could not fetch ${url} status: ${response.status}`)\r\n      }\r\n      const data=await response.json();\r\n\r\n      setLoading(false);\r\n      return data;\r\n\r\n\r\n    }catch(e){\r\n      setLoading(false);\r\n      setError(e.message);\r\n      throw e;\r\n    }\r\n  })\r\n\r\n  const clearError=useCallback(()=>setError(null),[]);\r\n\r\n  return{loading,request,error,clearError}\r\n}"]},"metadata":{},"sourceType":"module"}